
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package proye1_compi;

import java_cup.runtime.*;
import java.util.HashMap;
import java.util.List;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\245\000\002\002\004\000\002\055\002\000\002\004" +
    "\004\000\002\047\004\000\002\047\004\000\002\047\005" +
    "\000\002\047\005\000\002\047\003\000\002\047\004\000" +
    "\002\047\003\000\002\047\003\000\002\047\004\000\002" +
    "\047\004\000\002\047\003\000\002\047\004\000\002\047" +
    "\004\000\002\047\003\000\002\007\005\000\002\007\004" +
    "\000\002\007\005\000\002\007\005\000\002\007\004\000" +
    "\002\007\004\000\002\007\004\000\002\007\004\000\002" +
    "\007\005\000\002\007\004\000\002\007\004\000\002\007" +
    "\004\000\002\007\004\000\002\007\004\000\002\007\005" +
    "\000\002\007\004\000\002\007\004\000\002\007\005\000" +
    "\002\007\005\000\002\007\007\000\002\007\005\000\002" +
    "\007\004\000\002\007\004\000\002\007\004\000\002\007" +
    "\004\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\004\000\002\007\004\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\004\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\004\000\002\007\004\000\002\007\006\000" +
    "\002\007\004\000\002\007\003\000\002\007\003\000\002" +
    "\031\003\000\002\031\003\000\002\010\003\000\002\010" +
    "\005\000\002\010\005\000\002\012\003\000\002\012\005" +
    "\000\002\012\005\000\002\012\005\000\002\012\005\000" +
    "\002\011\003\000\002\011\004\000\002\011\003\000\002" +
    "\011\003\000\002\011\003\000\002\011\004\000\002\011" +
    "\004\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\006\000\002\011\005\000\002\032\007\000" +
    "\002\035\003\000\002\035\003\000\002\035\003\000\002" +
    "\036\005\000\002\036\005\000\002\036\004\000\002\036" +
    "\003\000\002\036\003\000\002\037\005\000\002\037\005" +
    "\000\002\037\005\000\002\040\003\000\002\040\003\000" +
    "\002\040\003\000\002\040\003\000\002\040\003\000\002" +
    "\040\003\000\002\040\003\000\002\041\003\000\002\041" +
    "\003\000\002\006\006\000\002\006\005\000\002\005\007" +
    "\000\002\005\007\000\002\005\007\000\002\005\007\000" +
    "\002\005\007\000\002\051\007\000\002\051\007\000\002" +
    "\051\007\000\002\051\007\000\002\051\007\000\002\052" +
    "\004\000\002\053\004\000\002\034\007\000\002\034\007" +
    "\000\002\034\007\000\002\034\007\000\002\034\007\000" +
    "\002\013\012\000\002\013\011\000\002\033\007\000\002" +
    "\014\012\000\002\014\011\000\002\045\005\000\002\045" +
    "\003\000\002\046\006\000\002\046\005\000\002\017\011" +
    "\000\002\020\007\000\002\021\011\000\002\022\014\000" +
    "\002\022\014\000\002\050\014\000\002\050\014\000\002" +
    "\023\010\000\002\023\007\000\002\025\005\000\002\025" +
    "\003\000\002\024\004\000\002\054\004\000\002\042\006" +
    "\000\002\026\014\000\002\027\010\000\002\027\007\000" +
    "\002\030\021\000\002\030\017\000\002\030\023\000\002" +
    "\043\007\000\002\043\007\000\002\043\007\000\002\043" +
    "\007\000\002\043\007\000\002\044\004\000\002\044\003" +
    "\000\002\016\006\000\002\016\006\000\002\016\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0180\000\010\003\000\036\000\100\000\001\002\000" +
    "\010\003\021\036\011\100\020\001\002\000\004\002\006" +
    "\001\002\000\004\002\001\001\002\000\004\002\uffff\001" +
    "\002\000\010\004\316\047\315\112\u0181\001\002\000\004" +
    "\062\u0170\001\002\000\004\025\u0164\001\002\000\012\002" +
    "\ufff8\003\021\036\011\100\020\001\002\000\004\025\233" +
    "\001\002\000\012\002\ufff1\003\021\036\011\100\020\001" +
    "\002\000\012\002\ufffa\003\021\036\011\100\020\001\002" +
    "\000\012\002\ufff7\003\021\036\011\100\020\001\002\000" +
    "\004\062\174\001\002\000\012\002\ufff4\003\021\036\011" +
    "\100\020\001\002\000\010\004\026\047\025\112\023\001" +
    "\002\000\012\002\ufff5\003\021\036\011\100\020\001\002" +
    "\000\106\002\uff89\003\uff89\004\uff89\012\uff89\023\uff89\025" +
    "\uff89\030\uff89\036\uff89\040\uff89\042\uff89\044\uff89\047\uff89" +
    "\051\uff89\052\uff89\053\uff89\054\uff89\055\uff89\056\uff89\057" +
    "\uff89\063\uff89\064\uff89\065\uff89\066\uff89\070\uff89\071\uff89" +
    "\074\uff89\075\uff89\077\uff89\100\uff89\102\uff89\103\uff89\104" +
    "\uff89\105\uff89\106\uff89\001\002\000\044\004\035\012\040" +
    "\023\057\030\062\040\061\042\042\051\060\052\055\053" +
    "\031\054\056\055\045\056\033\057\030\063\052\064\036" +
    "\065\053\106\043\001\002\000\004\047\027\001\002\000" +
    "\044\004\035\012\040\023\057\030\062\040\061\042\042" +
    "\051\060\052\055\053\031\054\056\055\045\056\033\057" +
    "\030\063\052\064\036\065\053\106\043\001\002\000\044" +
    "\004\uff9a\012\uff9a\023\uff9a\030\uff9a\040\uff9a\042\uff9a\051" +
    "\uff9a\052\uff9a\053\uff9a\054\uff9a\055\uff9a\056\uff9a\057\uff9a" +
    "\063\uff9a\064\uff9a\065\uff9a\106\uff9a\001\002\000\044\004" +
    "\uff9f\012\uff9f\023\uff9f\030\uff9f\040\uff9f\042\uff9f\051\uff9f" +
    "\052\uff9f\053\uff9f\054\uff9f\055\uff9f\056\uff9f\057\uff9f\063" +
    "\uff9f\064\uff9f\065\uff9f\106\uff9f\001\002\000\052\006\uffaf" +
    "\012\uffaf\015\uffaf\016\uffaf\017\uffaf\020\uffaf\041\uffaf\051" +
    "\uffaf\052\uffaf\053\uffaf\054\uffaf\055\uffaf\056\uffaf\057\uffaf" +
    "\060\uffaf\061\uffaf\062\uffaf\107\uffaf\111\uffaf\112\uffaf\001" +
    "\002\000\044\004\uff9c\012\uff9c\023\uff9c\030\uff9c\040\uff9c" +
    "\042\uff9c\051\uff9c\052\uff9c\053\uff9c\054\uff9c\055\uff9c\056" +
    "\uff9c\057\uff9c\063\uff9c\064\uff9c\065\uff9c\106\uff9c\001\002" +
    "\000\004\112\167\001\002\000\056\006\uffb3\010\121\011" +
    "\122\012\uffb3\015\uffb3\016\uffb3\017\uffb3\020\uffb3\041\uffb3" +
    "\051\uffb3\052\uffb3\053\uffb3\054\uffb3\055\uffb3\056\uffb3\057" +
    "\uffb3\060\066\061\067\106\123\107\uffb3\110\124\112\uffb3" +
    "\001\002\000\014\041\uffa4\060\uffa4\061\uffa4\107\uffa4\112" +
    "\uffa4\001\002\000\052\006\uffb7\012\uffb7\015\uffb7\016\uffb7" +
    "\017\uffb7\020\uffb7\041\uffb7\051\uffb7\052\uffb7\053\uffb7\054" +
    "\uffb7\055\uffb7\056\uffb7\057\uffb7\060\uffb7\061\uffb7\062\uffb7" +
    "\107\uffb7\111\uffb7\112\uffb7\001\002\000\010\023\057\063" +
    "\052\106\162\001\002\000\052\006\uffb0\012\uffb0\015\uffb0" +
    "\016\uffb0\017\uffb0\020\uffb0\041\uffb0\051\uffb0\052\uffb0\053" +
    "\uffb0\054\uffb0\055\uffb0\056\uffb0\057\uffb0\060\uffb0\061\uffb0" +
    "\062\uffb0\107\uffb0\111\uffb0\112\uffb0\001\002\000\052\006" +
    "\uffb5\012\uffb5\015\uffb5\016\uffb5\017\uffb5\020\uffb5\041\uffb5" +
    "\051\uffb5\052\uffb5\053\uffb5\054\uffb5\055\uffb5\056\uffb5\057" +
    "\uffb5\060\uffb5\061\uffb5\062\uffb5\107\uffb5\111\uffb5\112\uffb5" +
    "\001\002\000\044\004\035\012\040\023\057\030\062\040" +
    "\061\042\042\051\060\052\055\053\031\054\056\055\045" +
    "\056\033\057\030\063\052\064\036\065\053\106\043\001" +
    "\002\000\032\006\137\012\140\041\uffa9\051\060\052\055" +
    "\053\031\054\056\055\045\056\033\057\030\107\uffa9\112" +
    "\uffa9\001\002\000\044\004\uff9d\012\uff9d\023\uff9d\030\uff9d" +
    "\040\uff9d\042\uff9d\051\uff9d\052\uff9d\053\uff9d\054\uff9d\055" +
    "\uff9d\056\uff9d\057\uff9d\063\uff9d\064\uff9d\065\uff9d\106\uff9d" +
    "\001\002\000\010\041\uffa8\107\uffa8\112\uffa8\001\002\000" +
    "\052\006\uffbc\012\uffbc\015\uffbc\016\uffbc\017\uffbc\020\uffbc" +
    "\041\uffbc\051\uffbc\052\uffbc\053\uffbc\054\uffbc\055\uffbc\056" +
    "\uffbc\057\uffbc\060\uffbc\061\uffbc\062\uffbc\107\uffbc\111\uffbc" +
    "\112\uffbc\001\002\000\044\004\120\012\040\023\057\030" +
    "\062\040\061\042\042\051\060\052\055\053\031\054\056" +
    "\055\045\056\033\057\030\063\052\064\036\065\053\106" +
    "\146\001\002\000\052\006\uffbf\012\uffbf\015\112\016\114" +
    "\017\113\020\115\041\uffbf\051\uffbf\052\uffbf\053\uffbf\054" +
    "\uffbf\055\uffbf\056\uffbf\057\uffbf\060\uffbf\061\uffbf\062\uffbf" +
    "\107\uffbf\111\uffbf\112\uffbf\001\002\000\052\006\uffc0\012" +
    "\uffc0\015\uffc0\016\uffc0\017\uffc0\020\uffc0\041\uffc0\051\uffc0" +
    "\052\uffc0\053\uffc0\054\uffc0\055\uffc0\056\uffc0\057\uffc0\060" +
    "\uffc0\061\uffc0\062\uffc0\107\uffc0\111\uffc0\112\uffc0\001\002" +
    "\000\014\041\uffa3\060\uffa3\061\uffa3\107\uffa3\112\uffa3\001" +
    "\002\000\054\006\uff60\012\uff60\015\uff60\016\uff60\017\uff60" +
    "\020\uff60\040\061\041\uff60\051\uff60\052\uff60\053\uff60\054" +
    "\uff60\055\uff60\056\uff60\057\uff60\060\uff60\061\uff60\062\uff60" +
    "\107\uff60\111\uff60\112\uff60\001\002\000\044\004\uff99\012" +
    "\uff99\023\uff99\030\uff99\040\uff99\042\uff99\051\uff99\052\uff99" +
    "\053\uff99\054\uff99\055\uff99\056\uff99\057\uff99\063\uff99\064" +
    "\uff99\065\uff99\106\uff99\001\002\000\044\004\uff9e\012\uff9e" +
    "\023\uff9e\030\uff9e\040\uff9e\042\uff9e\051\uff9e\052\uff9e\053" +
    "\uff9e\054\uff9e\055\uff9e\056\uff9e\057\uff9e\063\uff9e\064\uff9e" +
    "\065\uff9e\106\uff9e\001\002\000\052\006\uffc1\012\uffc1\015" +
    "\uffc1\016\uffc1\017\uffc1\020\uffc1\041\uffc1\051\uffc1\052\uffc1" +
    "\053\uffc1\054\uffc1\055\uffc1\056\uffc1\057\uffc1\060\uffc1\061" +
    "\uffc1\062\uffc1\107\uffc1\111\uffc1\112\uffc1\001\002\000\044" +
    "\004\uff9b\012\uff9b\023\uff9b\030\uff9b\040\uff9b\042\uff9b\051" +
    "\uff9b\052\uff9b\053\uff9b\054\uff9b\055\uff9b\056\uff9b\057\uff9b" +
    "\063\uff9b\064\uff9b\065\uff9b\106\uff9b\001\002\000\004\062" +
    "\071\001\002\000\052\006\uffb4\012\uffb4\015\uffb4\016\uffb4" +
    "\017\uffb4\020\uffb4\041\uffb4\051\uffb4\052\uffb4\053\uffb4\054" +
    "\uffb4\055\uffb4\056\uffb4\057\uffb4\060\uffb4\061\uffb4\062\uffb4" +
    "\107\uffb4\111\uffb4\112\uffb4\001\002\000\014\041\uffaa\060" +
    "\066\061\067\107\uffaa\112\uffaa\001\002\000\052\006\uffae" +
    "\012\uffae\015\uffae\016\uffae\017\uffae\020\uffae\041\uffae\051" +
    "\uffae\052\uffae\053\uffae\054\uffae\055\uffae\056\uffae\057\uffae" +
    "\060\uffae\061\uffae\062\uffae\107\uffae\111\uffae\112\uffae\001" +
    "\002\000\044\004\035\012\040\023\057\030\062\040\061" +
    "\042\042\051\060\052\055\053\031\054\056\055\045\056" +
    "\033\057\030\063\052\064\036\065\053\106\043\001\002" +
    "\000\044\004\uff98\012\uff98\023\uff98\030\uff98\040\uff98\042" +
    "\uff98\051\uff98\052\uff98\053\uff98\054\uff98\055\uff98\056\uff98" +
    "\057\uff98\063\uff98\064\uff98\065\uff98\106\uff98\001\002\000" +
    "\044\004\uff97\012\uff97\023\uff97\030\uff97\040\uff97\042\uff97" +
    "\051\uff97\052\uff97\053\uff97\054\uff97\055\uff97\056\uff97\057" +
    "\uff97\063\uff97\064\uff97\065\uff97\106\uff97\001\002\000\010" +
    "\041\uffa2\107\uffa2\112\uffa2\001\002\000\014\031\076\032" +
    "\075\033\074\034\073\035\072\001\002\000\004\062\107" +
    "\001\002\000\004\062\105\001\002\000\004\062\103\001" +
    "\002\000\004\062\101\001\002\000\004\062\077\001\002" +
    "\000\004\004\100\001\002\000\054\006\uff66\012\uff66\015" +
    "\uff66\016\uff66\017\uff66\020\uff66\040\uff66\041\uff66\051\uff66" +
    "\052\uff66\053\uff66\054\uff66\055\uff66\056\uff66\057\uff66\060" +
    "\uff66\061\uff66\062\uff66\107\uff66\111\uff66\112\uff66\001\002" +
    "\000\004\004\102\001\002\000\054\006\uff65\012\uff65\015" +
    "\uff65\016\uff65\017\uff65\020\uff65\040\uff65\041\uff65\051\uff65" +
    "\052\uff65\053\uff65\054\uff65\055\uff65\056\uff65\057\uff65\060" +
    "\uff65\061\uff65\062\uff65\107\uff65\111\uff65\112\uff65\001\002" +
    "\000\004\004\104\001\002\000\054\006\uff63\012\uff63\015" +
    "\uff63\016\uff63\017\uff63\020\uff63\040\uff63\041\uff63\051\uff63" +
    "\052\uff63\053\uff63\054\uff63\055\uff63\056\uff63\057\uff63\060" +
    "\uff63\061\uff63\062\uff63\107\uff63\111\uff63\112\uff63\001\002" +
    "\000\004\004\106\001\002\000\054\006\uff62\012\uff62\015" +
    "\uff62\016\uff62\017\uff62\020\uff62\040\uff62\041\uff62\051\uff62" +
    "\052\uff62\053\uff62\054\uff62\055\uff62\056\uff62\057\uff62\060" +
    "\uff62\061\uff62\062\uff62\107\uff62\111\uff62\112\uff62\001\002" +
    "\000\004\004\110\001\002\000\054\006\uff64\012\uff64\015" +
    "\uff64\016\uff64\017\uff64\020\uff64\040\uff64\041\uff64\051\uff64" +
    "\052\uff64\053\uff64\054\uff64\055\uff64\056\uff64\057\uff64\060" +
    "\uff64\061\uff64\062\uff64\107\uff64\111\uff64\112\uff64\001\002" +
    "\000\052\006\uff61\012\uff61\015\uff61\016\uff61\017\uff61\020" +
    "\uff61\041\uff61\051\uff61\052\uff61\053\uff61\054\uff61\055\uff61" +
    "\056\uff61\057\uff61\060\uff61\061\uff61\062\uff61\107\uff61\111" +
    "\uff61\112\uff61\001\002\000\022\004\120\012\040\023\057" +
    "\030\062\040\061\042\042\063\052\106\116\001\002\000" +
    "\022\004\120\012\040\023\057\030\062\040\061\042\042" +
    "\063\052\106\116\001\002\000\022\004\120\012\040\023" +
    "\057\030\062\040\061\042\042\063\052\106\116\001\002" +
    "\000\022\004\120\012\040\023\057\030\062\040\061\042" +
    "\042\063\052\106\116\001\002\000\022\004\120\012\040" +
    "\023\057\030\062\040\061\042\042\063\052\106\116\001" +
    "\002\000\052\006\uffb8\012\uffb8\015\uffb8\016\uffb8\017\uffb8" +
    "\020\uffb8\041\uffb8\051\uffb8\052\uffb8\053\uffb8\054\uffb8\055" +
    "\uffb8\056\uffb8\057\uffb8\060\uffb8\061\uffb8\062\uffb8\107\uffb8" +
    "\111\uffb8\112\uffb8\001\002\000\062\006\uffb3\010\121\011" +
    "\122\012\uffb3\015\uffb3\016\uffb3\017\uffb3\020\uffb3\041\uffb3" +
    "\051\uffb3\052\uffb3\053\uffb3\054\uffb3\055\uffb3\056\uffb3\057" +
    "\uffb3\060\uffb3\061\uffb3\062\uffb3\106\123\107\uffb3\110\124" +
    "\111\uffb3\112\uffb3\001\002\000\052\006\uffb2\012\uffb2\015" +
    "\uffb2\016\uffb2\017\uffb2\020\uffb2\041\uffb2\051\uffb2\052\uffb2" +
    "\053\uffb2\054\uffb2\055\uffb2\056\uffb2\057\uffb2\060\uffb2\061" +
    "\uffb2\062\uffb2\107\uffb2\111\uffb2\112\uffb2\001\002\000\052" +
    "\006\uffb1\012\uffb1\015\uffb1\016\uffb1\017\uffb1\020\uffb1\041" +
    "\uffb1\051\uffb1\052\uffb1\053\uffb1\054\uffb1\055\uffb1\056\uffb1" +
    "\057\uffb1\060\uffb1\061\uffb1\062\uffb1\107\uffb1\111\uffb1\112" +
    "\uffb1\001\002\000\046\004\035\012\040\023\057\030\062" +
    "\040\061\042\042\051\060\052\055\053\031\054\056\055" +
    "\045\056\033\057\030\063\052\064\036\065\053\106\043" +
    "\107\131\001\002\000\004\023\125\001\002\000\004\111" +
    "\126\001\002\000\052\006\uff6d\012\uff6d\015\uff6d\016\uff6d" +
    "\017\uff6d\020\uff6d\041\uff6d\051\uff6d\052\uff6d\053\uff6d\054" +
    "\uff6d\055\uff6d\056\uff6d\057\uff6d\060\uff6d\061\uff6d\062\uff6d" +
    "\107\uff6d\111\uff6d\112\uff6d\001\002\000\006\041\133\107" +
    "\uff7d\001\002\000\004\107\132\001\002\000\052\006\uff7b" +
    "\012\uff7b\015\uff7b\016\uff7b\017\uff7b\020\uff7b\041\uff7b\051" +
    "\uff7b\052\uff7b\053\uff7b\054\uff7b\055\uff7b\056\uff7b\057\uff7b" +
    "\060\uff7b\061\uff7b\062\uff7b\107\uff7b\111\uff7b\112\uff7b\001" +
    "\002\000\052\006\uff7c\012\uff7c\015\uff7c\016\uff7c\017\uff7c" +
    "\020\uff7c\041\uff7c\051\uff7c\052\uff7c\053\uff7c\054\uff7c\055" +
    "\uff7c\056\uff7c\057\uff7c\060\uff7c\061\uff7c\062\uff7c\107\uff7c" +
    "\111\uff7c\112\uff7c\001\002\000\044\004\035\012\040\023" +
    "\057\030\062\040\061\042\042\051\060\052\055\053\031" +
    "\054\056\055\045\056\033\057\030\063\052\064\036\065" +
    "\053\106\043\001\002\000\004\107\uff7e\001\002\000\010" +
    "\006\137\012\140\107\136\001\002\000\052\006\uffac\012" +
    "\uffac\015\uffac\016\uffac\017\uffac\020\uffac\041\uffac\051\uffac" +
    "\052\uffac\053\uffac\054\uffac\055\uffac\056\uffac\057\uffac\060" +
    "\uffac\061\uffac\062\uffac\107\uffac\111\uffac\112\uffac\001\002" +
    "\000\022\004\120\012\040\023\057\030\062\040\061\042" +
    "\042\063\052\106\116\001\002\000\022\004\120\012\040" +
    "\023\057\030\062\040\061\042\042\063\052\106\116\001" +
    "\002\000\052\006\uffbd\012\uffbd\015\112\016\114\017\113" +
    "\020\115\041\uffbd\051\uffbd\052\uffbd\053\uffbd\054\uffbd\055" +
    "\uffbd\056\uffbd\057\uffbd\060\uffbd\061\uffbd\062\uffbd\107\uffbd" +
    "\111\uffbd\112\uffbd\001\002\000\052\006\uffbe\012\uffbe\015" +
    "\112\016\114\017\113\020\115\041\uffbe\051\uffbe\052\uffbe" +
    "\053\uffbe\054\uffbe\055\uffbe\056\uffbe\057\uffbe\060\uffbe\061" +
    "\uffbe\062\uffbe\107\uffbe\111\uffbe\112\uffbe\001\002\000\052" +
    "\006\uffba\012\uffba\015\uffba\016\uffba\017\uffba\020\uffba\041" +
    "\uffba\051\uffba\052\uffba\053\uffba\054\uffba\055\uffba\056\uffba" +
    "\057\uffba\060\uffba\061\uffba\062\uffba\107\uffba\111\uffba\112" +
    "\uffba\001\002\000\052\006\uffb9\012\uffb9\015\uffb9\016\uffb9" +
    "\017\uffb9\020\uffb9\041\uffb9\051\uffb9\052\uffb9\053\uffb9\054" +
    "\uffb9\055\uffb9\056\uffb9\057\uffb9\060\uffb9\061\uffb9\062\uffb9" +
    "\107\uffb9\111\uffb9\112\uffb9\001\002\000\052\006\uffbb\012" +
    "\uffbb\015\uffbb\016\uffbb\017\uffbb\020\uffbb\041\uffbb\051\uffbb" +
    "\052\uffbb\053\uffbb\054\uffbb\055\uffbb\056\uffbb\057\uffbb\060" +
    "\uffbb\061\uffbb\062\uffbb\107\uffbb\111\uffbb\112\uffbb\001\002" +
    "\000\044\004\120\012\040\023\057\030\062\040\061\042" +
    "\042\051\060\052\055\053\031\054\056\055\045\056\033" +
    "\057\030\063\052\064\036\065\053\106\146\001\002\000" +
    "\024\006\137\012\140\051\060\052\055\053\031\054\056" +
    "\055\045\056\033\057\030\001\002\000\014\041\uffa5\060" +
    "\uffa5\061\uffa5\107\uffa5\112\uffa5\001\002\000\022\004\120" +
    "\012\040\023\057\030\062\040\061\042\042\063\052\106" +
    "\116\001\002\000\020\006\137\012\140\041\uffa7\060\uffa7" +
    "\061\uffa7\107\uffa7\112\uffa7\001\002\000\026\006\137\012" +
    "\140\051\060\052\055\053\031\054\056\055\045\056\033" +
    "\057\030\107\136\001\002\000\004\107\155\001\002\000" +
    "\014\041\uffa6\060\uffa6\061\uffa6\107\uffa6\112\uffa6\001\002" +
    "\000\004\107\160\001\002\000\010\060\066\061\067\107" +
    "\155\001\002\000\010\041\uffa0\107\uffa0\112\uffa0\001\002" +
    "\000\052\006\uffb6\012\uffb6\015\uffb6\016\uffb6\017\uffb6\020" +
    "\uffb6\041\uffb6\051\uffb6\052\uffb6\053\uffb6\054\uffb6\055\uffb6" +
    "\056\uffb6\057\uffb6\060\uffb6\061\uffb6\062\uffb6\107\uffb6\111" +
    "\uffb6\112\uffb6\001\002\000\022\004\120\012\040\023\057" +
    "\030\062\040\061\042\042\063\052\106\116\001\002\000" +
    "\010\006\137\012\140\107\164\001\002\000\052\006\uffad" +
    "\012\uffad\015\uffad\016\uffad\017\uffad\020\uffad\041\uffad\051" +
    "\uffad\052\uffad\053\uffad\054\uffad\055\uffad\056\uffad\057\uffad" +
    "\060\uffad\061\uffad\062\uffad\107\uffad\111\uffad\112\uffad\001" +
    "\002\000\044\004\035\012\040\023\057\030\062\040\061" +
    "\042\042\051\060\052\055\053\031\054\056\055\045\056" +
    "\033\057\030\063\052\064\036\065\053\106\043\001\002" +
    "\000\010\041\uffa1\107\uffa1\112\uffa1\001\002\000\106\002" +
    "\uff96\003\uff96\004\uff96\012\uff96\023\uff96\025\uff96\030\uff96" +
    "\036\uff96\040\uff96\042\uff96\044\uff96\047\uff96\051\uff96\052" +
    "\uff96\053\uff96\054\uff96\055\uff96\056\uff96\057\uff96\063\uff96" +
    "\064\uff96\065\uff96\066\uff96\070\uff96\071\uff96\074\uff96\075" +
    "\uff96\077\uff96\100\uff96\102\uff96\103\uff96\104\uff96\105\uff96" +
    "\106\uff96\001\002\000\004\112\171\001\002\000\106\002" +
    "\uff95\003\uff95\004\uff95\012\uff95\023\uff95\025\uff95\030\uff95" +
    "\036\uff95\040\uff95\042\uff95\044\uff95\047\uff95\051\uff95\052" +
    "\uff95\053\uff95\054\uff95\055\uff95\056\uff95\057\uff95\063\uff95" +
    "\064\uff95\065\uff95\066\uff95\070\uff95\071\uff95\074\uff95\075" +
    "\uff95\077\uff95\100\uff95\102\uff95\103\uff95\104\uff95\105\uff95" +
    "\106\uff95\001\002\000\004\002\ufffb\001\002\000\004\002" +
    "\ufff3\001\002\000\014\031\201\032\200\033\177\034\176" +
    "\035\175\001\002\000\004\062\226\001\002\000\004\062" +
    "\224\001\002\000\004\062\222\001\002\000\004\062\212" +
    "\001\002\000\004\062\202\001\002\000\006\004\203\076" +
    "\204\001\002\000\010\004\uff8f\047\uff8f\112\uff8f\001\002" +
    "\000\004\062\205\001\002\000\004\004\206\001\002\000" +
    "\004\110\207\001\002\000\004\023\210\001\002\000\004" +
    "\111\211\001\002\000\010\004\uff75\047\uff75\112\uff75\001" +
    "\002\000\006\004\213\076\214\001\002\000\010\004\uff8e" +
    "\047\uff8e\112\uff8e\001\002\000\004\062\215\001\002\000" +
    "\004\004\216\001\002\000\004\110\217\001\002\000\004" +
    "\023\220\001\002\000\004\111\221\001\002\000\010\004" +
    "\uff74\047\uff74\112\uff74\001\002\000\004\004\223\001\002" +
    "\000\010\004\uff8d\047\uff8d\112\uff8d\001\002\000\004\004" +
    "\225\001\002\000\010\004\uff8b\047\uff8b\112\uff8b\001\002" +
    "\000\004\004\227\001\002\000\010\004\uff8c\047\uff8c\112" +
    "\uff8c\001\002\000\004\002\ufffd\001\002\000\004\002\ufff9" +
    "\001\002\000\004\002\ufff2\001\002\000\076\003\255\004" +
    "\274\012\040\023\057\030\062\036\011\040\061\042\042" +
    "\044\260\047\262\051\060\052\055\053\031\054\056\055" +
    "\045\056\033\057\030\063\052\064\036\065\053\066\246" +
    "\070\267\071\242\074\263\077\266\100\020\103\250\104" +
    "\273\105\237\106\043\001\002\000\102\004\uffc3\012\uffc3" +
    "\023\uffc3\025\uffc3\030\uffc3\036\uffc3\040\uffc3\042\uffc3\044" +
    "\uffc3\047\uffc3\051\uffc3\052\uffc3\053\uffc3\054\uffc3\055\uffc3" +
    "\056\uffc3\057\uffc3\063\uffc3\064\uffc3\065\uffc3\066\uffc3\070" +
    "\uffc3\071\uffc3\074\uffc3\075\uffc3\077\uffc3\100\uffc3\102\uffc3" +
    "\103\uffc3\104\uffc3\105\uffc3\106\uffc3\001\002\000\102\004" +
    "\uffc8\012\uffc8\023\uffc8\025\uffc8\030\uffc8\036\uffc8\040\uffc8" +
    "\042\uffc8\044\uffc8\047\uffc8\051\uffc8\052\uffc8\053\uffc8\054" +
    "\uffc8\055\uffc8\056\uffc8\057\uffc8\063\uffc8\064\uffc8\065\uffc8" +
    "\066\uffc8\070\uffc8\071\uffc8\074\uffc8\075\uffc8\077\uffc8\100" +
    "\uffc8\102\uffc8\103\uffc8\104\uffc8\105\uffc8\106\uffc8\001\002" +
    "\000\102\004\uffcb\012\uffcb\023\uffcb\025\uffcb\030\uffcb\036" +
    "\uffcb\040\uffcb\042\uffcb\044\uffcb\047\uffcb\051\uffcb\052\uffcb" +
    "\053\uffcb\054\uffcb\055\uffcb\056\uffcb\057\uffcb\063\uffcb\064" +
    "\uffcb\065\uffcb\066\uffcb\070\uffcb\071\uffcb\074\uffcb\075\uffcb" +
    "\077\uffcb\100\uffcb\102\uffcb\103\uffcb\104\uffcb\105\uffcb\106" +
    "\uffcb\001\002\000\004\106\u015f\001\002\000\102\004\uffd4" +
    "\012\uffd4\023\uffd4\025\uffd4\030\uffd4\036\uffd4\040\uffd4\042" +
    "\uffd4\044\uffd4\047\uffd4\051\uffd4\052\uffd4\053\uffd4\054\uffd4" +
    "\055\uffd4\056\uffd4\057\uffd4\063\uffd4\064\uffd4\065\uffd4\066" +
    "\uffd4\070\uffd4\071\uffd4\074\uffd4\075\uffd4\077\uffd4\100\uffd4" +
    "\102\uffd4\103\uffd4\104\uffd4\105\uffd4\106\uffd4\001\002\000" +
    "\102\004\uffcf\012\uffcf\023\uffcf\025\uffcf\030\uffcf\036\uffcf" +
    "\040\uffcf\042\uffcf\044\uffcf\047\uffcf\051\uffcf\052\uffcf\053" +
    "\uffcf\054\uffcf\055\uffcf\056\uffcf\057\uffcf\063\uffcf\064\uffcf" +
    "\065\uffcf\066\uffcf\070\uffcf\071\uffcf\074\uffcf\075\uffcf\077" +
    "\uffcf\100\uffcf\102\uffcf\103\uffcf\104\uffcf\105\uffcf\106\uffcf" +
    "\001\002\000\004\062\u0147\001\002\000\010\004\316\047" +
    "\315\112\u0146\001\002\000\074\004\274\012\040\023\057" +
    "\030\062\036\011\040\061\042\042\044\361\047\262\051" +
    "\060\052\055\053\031\054\056\055\045\056\033\057\030" +
    "\063\052\064\036\065\053\066\246\070\267\071\242\074" +
    "\263\077\266\100\020\103\u0141\104\273\105\237\106\043" +
    "\001\002\000\104\004\uffcd\012\uffcd\023\uffcd\025\uffcd\030" +
    "\uffcd\036\uffcd\040\uffcd\042\uffcd\044\uffcd\047\uffcd\051\uffcd" +
    "\052\uffcd\053\uffcd\054\uffcd\055\uffcd\056\uffcd\057\uffcd\063" +
    "\uffcd\064\uffcd\065\uffcd\066\uffcd\067\u0102\070\uffcd\071\uffcd" +
    "\074\uffcd\075\uffcd\077\uffcd\100\uffcd\102\uffcd\103\uffcd\104" +
    "\uffcd\105\uffcd\106\uffcd\001\002\000\004\106\u013b\001\002" +
    "\000\102\004\uffd5\012\uffd5\023\uffd5\025\uffd5\030\uffd5\036" +
    "\uffd5\040\uffd5\042\uffd5\044\uffd5\047\uffd5\051\uffd5\052\uffd5" +
    "\053\uffd5\054\uffd5\055\uffd5\056\uffd5\057\uffd5\063\uffd5\064" +
    "\uffd5\065\uffd5\066\uffd5\070\uffd5\071\uffd5\074\uffd5\075\uffd5" +
    "\077\uffd5\100\uffd5\102\uffd5\103\uffd5\104\uffd5\105\uffd5\106" +
    "\uffd5\001\002\000\006\062\u0137\112\334\001\002\000\102" +
    "\004\uffc9\012\uffc9\023\uffc9\025\uffc9\030\uffc9\036\uffc9\040" +
    "\uffc9\042\uffc9\044\uffc9\047\uffc9\051\uffc9\052\uffc9\053\uffc9" +
    "\054\uffc9\055\uffc9\056\uffc9\057\uffc9\063\uffc9\064\uffc9\065" +
    "\uffc9\066\uffc9\070\uffc9\071\uffc9\074\uffc9\075\uffc9\077\uffc9" +
    "\100\uffc9\102\uffc9\103\uffc9\104\uffc9\105\uffc9\106\uffc9\001" +
    "\002\000\102\004\uffd0\012\uffd0\023\uffd0\025\uffd0\030\uffd0" +
    "\036\uffd0\040\uffd0\042\uffd0\044\uffd0\047\uffd0\051\uffd0\052" +
    "\uffd0\053\uffd0\054\uffd0\055\uffd0\056\uffd0\057\uffd0\063\uffd0" +
    "\064\uffd0\065\uffd0\066\uffd0\070\uffd0\071\uffd0\074\uffd0\075" +
    "\uffd0\077\uffd0\100\uffd0\102\uffd0\103\uffd0\104\uffd0\105\uffd0" +
    "\106\uffd0\001\002\000\102\004\uffd6\012\uffd6\023\uffd6\025" +
    "\uffd6\030\uffd6\036\uffd6\040\uffd6\042\uffd6\044\uffd6\047\uffd6" +
    "\051\uffd6\052\uffd6\053\uffd6\054\uffd6\055\uffd6\056\uffd6\057" +
    "\uffd6\063\uffd6\064\uffd6\065\uffd6\066\uffd6\070\uffd6\071\uffd6" +
    "\074\uffd6\075\uffd6\077\uffd6\100\uffd6\102\uffd6\103\uffd6\104" +
    "\uffd6\105\uffd6\106\uffd6\001\002\000\102\004\uffd1\012\uffd1" +
    "\023\uffd1\025\uffd1\030\uffd1\036\uffd1\040\uffd1\042\uffd1\044" +
    "\uffd1\047\uffd1\051\uffd1\052\uffd1\053\uffd1\054\uffd1\055\uffd1" +
    "\056\uffd1\057\uffd1\063\uffd1\064\uffd1\065\uffd1\066\uffd1\070" +
    "\uffd1\071\uffd1\074\uffd1\075\uffd1\077\uffd1\100\uffd1\102\uffd1" +
    "\103\uffd1\104\uffd1\105\uffd1\106\uffd1\001\002\000\102\004" +
    "\uffc2\012\uffc2\023\uffc2\025\uffc2\030\uffc2\036\uffc2\040\uffc2" +
    "\042\uffc2\044\uffc2\047\uffc2\051\uffc2\052\uffc2\053\uffc2\054" +
    "\uffc2\055\uffc2\056\uffc2\057\uffc2\063\uffc2\064\uffc2\065\uffc2" +
    "\066\uffc2\070\uffc2\071\uffc2\074\uffc2\075\uffc2\077\uffc2\100" +
    "\uffc2\102\uffc2\103\uffc2\104\uffc2\105\uffc2\106\uffc2\001\002" +
    "\000\010\004\026\047\025\112\u0136\001\002\000\102\004" +
    "\uffca\012\uffca\023\uffca\025\uffca\030\uffca\036\uffca\040\uffca" +
    "\042\uffca\044\uffca\047\uffca\051\uffca\052\uffca\053\uffca\054" +
    "\uffca\055\uffca\056\uffca\057\uffca\063\uffca\064\uffca\065\uffca" +
    "\066\uffca\070\uffca\071\uffca\074\uffca\075\uffca\077\uffca\100" +
    "\uffca\102\uffca\103\uffca\104\uffca\105\uffca\106\uffca\001\002" +
    "\000\004\112\u0135\001\002\000\004\112\u0134\001\002\000" +
    "\046\004\035\012\040\023\057\030\062\040\061\042\042" +
    "\051\060\052\055\053\031\054\056\055\045\056\033\057" +
    "\030\063\052\064\036\065\053\106\043\110\321\001\002" +
    "\000\004\106\u0125\001\002\000\004\112\u0124\001\002\000" +
    "\102\004\uffd7\012\uffd7\023\uffd7\025\uffd7\030\uffd7\036\uffd7" +
    "\040\uffd7\042\uffd7\044\uffd7\047\uffd7\051\uffd7\052\uffd7\053" +
    "\uffd7\054\uffd7\055\uffd7\056\uffd7\057\uffd7\063\uffd7\064\uffd7" +
    "\065\uffd7\066\uffd7\070\uffd7\071\uffd7\074\uffd7\075\uffd7\077" +
    "\uffd7\100\uffd7\102\uffd7\103\uffd7\104\uffd7\105\uffd7\106\uffd7" +
    "\001\002\000\004\062\u0108\001\002\000\004\106\326\001" +
    "\002\000\102\004\uffcc\012\uffcc\023\uffcc\025\uffcc\030\uffcc" +
    "\036\uffcc\040\uffcc\042\uffcc\044\uffcc\047\uffcc\051\uffcc\052" +
    "\uffcc\053\uffcc\054\uffcc\055\uffcc\056\uffcc\057\uffcc\063\uffcc" +
    "\064\uffcc\065\uffcc\066\uffcc\070\uffcc\071\uffcc\074\uffcc\075" +
    "\uffcc\077\uffcc\100\uffcc\102\uffcc\103\uffcc\104\uffcc\105\uffcc" +
    "\106\uffcc\001\002\000\010\004\026\047\025\112\325\001" +
    "\002\000\010\004\316\047\315\112\314\001\002\000\004" +
    "\106\305\001\002\000\054\006\uffb3\010\121\011\122\012" +
    "\uffb3\015\uffb3\016\uffb3\017\uffb3\020\uffb3\047\275\051\uffb3" +
    "\052\uffb3\053\uffb3\054\uffb3\055\uffb3\056\uffb3\057\uffb3\060" +
    "\066\061\067\106\123\110\124\112\uffb3\001\002\000\046" +
    "\004\035\012\040\023\057\030\062\040\061\042\042\051" +
    "\060\052\055\053\031\054\056\055\045\056\033\057\030" +
    "\063\052\064\036\065\053\106\043\110\276\001\002\000" +
    "\022\004\120\012\040\023\057\030\062\040\061\042\042" +
    "\063\052\106\116\001\002\000\012\006\137\012\140\041" +
    "\303\111\uff70\001\002\000\004\111\301\001\002\000\004" +
    "\112\302\001\002\000\106\002\uff73\003\uff73\004\uff73\012" +
    "\uff73\023\uff73\025\uff73\030\uff73\036\uff73\040\uff73\042\uff73" +
    "\044\uff73\047\uff73\051\uff73\052\uff73\053\uff73\054\uff73\055" +
    "\uff73\056\uff73\057\uff73\063\uff73\064\uff73\065\uff73\066\uff73" +
    "\070\uff73\071\uff73\074\uff73\075\uff73\077\uff73\100\uff73\102" +
    "\uff73\103\uff73\104\uff73\105\uff73\106\uff73\001\002\000\022" +
    "\004\120\012\040\023\057\030\062\040\061\042\042\063" +
    "\052\106\116\001\002\000\004\111\uff71\001\002\000\012" +
    "\004\307\023\057\042\310\063\052\001\002\000\004\107" +
    "\313\001\002\000\004\107\312\001\002\000\004\107\311" +
    "\001\002\000\004\112\uff5d\001\002\000\004\112\uff5e\001" +
    "\002\000\004\112\uff5f\001\002\000\102\004\uffd3\012\uffd3" +
    "\023\uffd3\025\uffd3\030\uffd3\036\uffd3\040\uffd3\042\uffd3\044" +
    "\uffd3\047\uffd3\051\uffd3\052\uffd3\053\uffd3\054\uffd3\055\uffd3" +
    "\056\uffd3\057\uffd3\063\uffd3\064\uffd3\065\uffd3\066\uffd3\070" +
    "\uffd3\071\uffd3\074\uffd3\075\uffd3\077\uffd3\100\uffd3\102\uffd3" +
    "\103\uffd3\104\uffd3\105\uffd3\106\uffd3\001\002\000\004\110" +
    "\321\001\002\000\004\047\320\001\002\000\106\002\uff6e" +
    "\003\uff6e\004\uff6e\012\uff6e\023\uff6e\025\uff6e\030\uff6e\036" +
    "\uff6e\040\uff6e\042\uff6e\044\uff6e\047\uff6e\051\uff6e\052\uff6e" +
    "\053\uff6e\054\uff6e\055\uff6e\056\uff6e\057\uff6e\063\uff6e\064" +
    "\uff6e\065\uff6e\066\uff6e\070\uff6e\071\uff6e\074\uff6e\075\uff6e" +
    "\077\uff6e\100\uff6e\102\uff6e\103\uff6e\104\uff6e\105\uff6e\106" +
    "\uff6e\001\002\000\004\110\276\001\002\000\022\004\120" +
    "\012\040\023\057\030\062\040\061\042\042\063\052\106" +
    "\116\001\002\000\004\111\323\001\002\000\004\112\324" +
    "\001\002\000\106\002\uff72\003\uff72\004\uff72\012\uff72\023" +
    "\uff72\025\uff72\030\uff72\036\uff72\040\uff72\042\uff72\044\uff72" +
    "\047\uff72\051\uff72\052\uff72\053\uff72\054\uff72\055\uff72\056" +
    "\uff72\057\uff72\063\uff72\064\uff72\065\uff72\066\uff72\070\uff72" +
    "\071\uff72\074\uff72\075\uff72\077\uff72\100\uff72\102\uff72\103" +
    "\uff72\104\uff72\105\uff72\106\uff72\001\002\000\102\004\uffd2" +
    "\012\uffd2\023\uffd2\025\uffd2\030\uffd2\036\uffd2\040\uffd2\042" +
    "\uffd2\044\uffd2\047\uffd2\051\uffd2\052\uffd2\053\uffd2\054\uffd2" +
    "\055\uffd2\056\uffd2\057\uffd2\063\uffd2\064\uffd2\065\uffd2\066" +
    "\uffd2\070\uffd2\071\uffd2\074\uffd2\075\uffd2\077\uffd2\100\uffd2" +
    "\102\uffd2\103\uffd2\104\uffd2\105\uffd2\106\uffd2\001\002\000" +
    "\044\004\035\012\040\023\057\030\062\040\061\042\042" +
    "\051\060\052\055\053\031\054\056\055\045\056\033\057" +
    "\030\063\052\064\036\065\053\106\043\001\002\000\004" +
    "\107\330\001\002\000\004\025\331\001\002\000\076\003" +
    "\255\004\274\012\040\023\057\030\062\036\011\040\061" +
    "\042\042\044\260\047\262\051\060\052\055\053\031\054" +
    "\056\055\045\056\033\057\030\063\052\064\036\065\053" +
    "\066\246\070\267\071\242\074\263\077\266\100\020\103" +
    "\333\104\273\105\237\106\043\001\002\000\076\004\274" +
    "\012\040\023\057\025\355\030\062\036\011\040\061\042" +
    "\042\044\361\047\262\051\060\052\055\053\031\054\056" +
    "\055\045\056\033\057\030\063\052\064\036\065\053\066" +
    "\246\070\267\071\242\074\263\077\266\100\020\103\350" +
    "\104\273\105\237\106\043\001\002\000\006\062\335\112" +
    "\334\001\002\000\102\004\uffc4\012\uffc4\023\uffc4\025\uffc4" +
    "\030\uffc4\036\uffc4\040\uffc4\042\uffc4\044\uffc4\047\uffc4\051" +
    "\uffc4\052\uffc4\053\uffc4\054\uffc4\055\uffc4\056\uffc4\057\uffc4" +
    "\063\uffc4\064\uffc4\065\uffc4\066\uffc4\070\uffc4\071\uffc4\074" +
    "\uffc4\075\uffc4\077\uffc4\100\uffc4\102\uffc4\103\uffc4\104\uffc4" +
    "\105\uffc4\106\uffc4\001\002\000\044\004\035\012\040\023" +
    "\057\030\062\040\061\042\042\051\060\052\055\053\031" +
    "\054\056\055\045\056\033\057\030\063\052\064\036\065" +
    "\053\106\043\001\002\000\004\112\337\001\002\000\102" +
    "\004\uffc5\012\uffc5\023\uffc5\025\uffc5\030\uffc5\036\uffc5\040" +
    "\uffc5\042\uffc5\044\uffc5\047\uffc5\051\uffc5\052\uffc5\053\uffc5" +
    "\054\uffc5\055\uffc5\056\uffc5\057\uffc5\063\uffc5\064\uffc5\065" +
    "\uffc5\066\uffc5\070\uffc5\071\uffc5\074\uffc5\075\uffc5\077\uffc5" +
    "\100\uffc5\102\uffc5\103\uffc5\104\uffc5\105\uffc5\106\uffc5\001" +
    "\002\000\102\004\uffdb\012\uffdb\023\uffdb\025\uffdb\030\uffdb" +
    "\036\uffdb\040\uffdb\042\uffdb\044\uffdb\047\uffdb\051\uffdb\052" +
    "\uffdb\053\uffdb\054\uffdb\055\uffdb\056\uffdb\057\uffdb\063\uffdb" +
    "\064\uffdb\065\uffdb\066\uffdb\070\uffdb\071\uffdb\074\uffdb\075" +
    "\uffdb\077\uffdb\100\uffdb\102\uffdb\103\uffdb\104\uffdb\105\uffdb" +
    "\106\uffdb\001\002\000\102\004\uffe5\012\uffe5\023\uffe5\025" +
    "\uffe5\030\uffe5\036\uffe5\040\uffe5\042\uffe5\044\uffe5\047\uffe5" +
    "\051\uffe5\052\uffe5\053\uffe5\054\uffe5\055\uffe5\056\uffe5\057" +
    "\uffe5\063\uffe5\064\uffe5\065\uffe5\066\uffe5\070\uffe5\071\uffe5" +
    "\074\uffe5\075\uffe5\077\uffe5\100\uffe5\102\uffe5\103\uffe5\104" +
    "\uffe5\105\uffe5\106\uffe5\001\002\000\102\004\uffe4\012\uffe4" +
    "\023\uffe4\025\uffe4\030\uffe4\036\uffe4\040\uffe4\042\uffe4\044" +
    "\uffe4\047\uffe4\051\uffe4\052\uffe4\053\uffe4\054\uffe4\055\uffe4" +
    "\056\uffe4\057\uffe4\063\uffe4\064\uffe4\065\uffe4\066\uffe4\070" +
    "\uffe4\071\uffe4\074\uffe4\075\uffe4\077\uffe4\100\uffe4\102\uffe4" +
    "\103\uffe4\104\uffe4\105\uffe4\106\uffe4\001\002\000\102\004" +
    "\uffef\012\uffef\023\uffef\025\uffef\030\uffef\036\uffef\040\uffef" +
    "\042\uffef\044\uffef\047\uffef\051\uffef\052\uffef\053\uffef\054" +
    "\uffef\055\uffef\056\uffef\057\uffef\063\uffef\064\uffef\065\uffef" +
    "\066\uffef\070\uffef\071\uffef\074\uffef\075\uffef\077\uffef\100" +
    "\uffef\102\uffef\103\uffef\104\uffef\105\uffef\106\uffef\001\002" +
    "\000\102\004\uffe1\012\uffe1\023\uffe1\025\uffe1\030\uffe1\036" +
    "\uffe1\040\uffe1\042\uffe1\044\uffe1\047\uffe1\051\uffe1\052\uffe1" +
    "\053\uffe1\054\uffe1\055\uffe1\056\uffe1\057\uffe1\063\uffe1\064" +
    "\uffe1\065\uffe1\066\uffe1\070\uffe1\071\uffe1\074\uffe1\075\uffe1" +
    "\077\uffe1\100\uffe1\102\uffe1\103\uffe1\104\uffe1\105\uffe1\106" +
    "\uffe1\001\002\000\010\004\316\047\315\112\u0106\001\002" +
    "\000\104\004\uffe7\012\uffe7\023\uffe7\025\uffe7\030\uffe7\036" +
    "\uffe7\040\uffe7\042\uffe7\044\uffe7\047\uffe7\051\uffe7\052\uffe7" +
    "\053\uffe7\054\uffe7\055\uffe7\056\uffe7\057\uffe7\063\uffe7\064" +
    "\uffe7\065\uffe7\066\uffe7\067\u0102\070\uffe7\071\uffe7\074\uffe7" +
    "\075\uffe7\077\uffe7\100\uffe7\102\uffe7\103\uffe7\104\uffe7\105" +
    "\uffe7\106\uffe7\001\002\000\102\004\uffe9\012\uffe9\023\uffe9" +
    "\025\uffe9\030\uffe9\036\uffe9\040\uffe9\042\uffe9\044\uffe9\047" +
    "\uffe9\051\uffe9\052\uffe9\053\uffe9\054\uffe9\055\uffe9\056\uffe9" +
    "\057\uffe9\063\uffe9\064\uffe9\065\uffe9\066\uffe9\070\uffe9\071" +
    "\uffe9\074\uffe9\075\uffe9\077\uffe9\100\uffe9\102\uffe9\103\uffe9" +
    "\104\uffe9\105\uffe9\106\uffe9\001\002\000\006\062\376\112" +
    "\377\001\002\000\102\004\uffda\012\uffda\023\uffda\025\uffda" +
    "\030\uffda\036\uffda\040\uffda\042\uffda\044\uffda\047\uffda\051" +
    "\uffda\052\uffda\053\uffda\054\uffda\055\uffda\056\uffda\057\uffda" +
    "\063\uffda\064\uffda\065\uffda\066\uffda\070\uffda\071\uffda\074" +
    "\uffda\075\uffda\077\uffda\100\uffda\102\uffda\103\uffda\104\uffda" +
    "\105\uffda\106\uffda\001\002\000\102\004\uffeb\012\uffeb\023" +
    "\uffeb\025\uffeb\030\uffeb\036\uffeb\040\uffeb\042\uffeb\044\uffeb" +
    "\047\uffeb\051\uffeb\052\uffeb\053\uffeb\054\uffeb\055\uffeb\056" +
    "\uffeb\057\uffeb\063\uffeb\064\uffeb\065\uffeb\066\uffeb\070\uffeb" +
    "\071\uffeb\074\uffeb\075\uffeb\077\uffeb\100\uffeb\102\uffeb\103" +
    "\uffeb\104\uffeb\105\uffeb\106\uffeb\001\002\000\102\004\uffea" +
    "\012\uffea\023\uffea\025\uffea\030\uffea\036\uffea\040\uffea\042" +
    "\uffea\044\uffea\047\uffea\051\uffea\052\uffea\053\uffea\054\uffea" +
    "\055\uffea\056\uffea\057\uffea\063\uffea\064\uffea\065\uffea\066" +
    "\uffea\070\uffea\071\uffea\074\uffea\075\uffea\077\uffea\100\uffea" +
    "\102\uffea\103\uffea\104\uffea\105\uffea\106\uffea\001\002\000" +
    "\102\004\uffec\012\uffec\023\uffec\025\uffec\030\uffec\036\uffec" +
    "\040\uffec\042\uffec\044\uffec\047\uffec\051\uffec\052\uffec\053" +
    "\uffec\054\uffec\055\uffec\056\uffec\057\uffec\063\uffec\064\uffec" +
    "\065\uffec\066\uffec\070\uffec\071\uffec\074\uffec\075\uffec\077" +
    "\uffec\100\uffec\102\uffec\103\uffec\104\uffec\105\uffec\106\uffec" +
    "\001\002\000\102\004\uff78\012\uff78\023\uff78\025\uff78\030" +
    "\uff78\036\uff78\040\uff78\042\uff78\044\uff78\047\uff78\051\uff78" +
    "\052\uff78\053\uff78\054\uff78\055\uff78\056\uff78\057\uff78\063" +
    "\uff78\064\uff78\065\uff78\066\uff78\070\uff78\071\uff78\074\uff78" +
    "\075\uff78\077\uff78\100\uff78\102\uff78\103\uff78\104\uff78\105" +
    "\uff78\106\uff78\001\002\000\010\004\026\047\025\112\374" +
    "\001\002\000\102\004\uffe3\012\uffe3\023\uffe3\025\uffe3\030" +
    "\uffe3\036\uffe3\040\uffe3\042\uffe3\044\uffe3\047\uffe3\051\uffe3" +
    "\052\uffe3\053\uffe3\054\uffe3\055\uffe3\056\uffe3\057\uffe3\063" +
    "\uffe3\064\uffe3\065\uffe3\066\uffe3\070\uffe3\071\uffe3\074\uffe3" +
    "\075\uffe3\077\uffe3\100\uffe3\102\uffe3\103\uffe3\104\uffe3\105" +
    "\uffe3\106\uffe3\001\002\000\004\112\373\001\002\000\004" +
    "\112\372\001\002\000\004\112\371\001\002\000\102\004" +
    "\uffe0\012\uffe0\023\uffe0\025\uffe0\030\uffe0\036\uffe0\040\uffe0" +
    "\042\uffe0\044\uffe0\047\uffe0\051\uffe0\052\uffe0\053\uffe0\054" +
    "\uffe0\055\uffe0\056\uffe0\057\uffe0\063\uffe0\064\uffe0\065\uffe0" +
    "\066\uffe0\070\uffe0\071\uffe0\074\uffe0\075\uffe0\077\uffe0\100" +
    "\uffe0\102\uffe0\103\uffe0\104\uffe0\105\uffe0\106\uffe0\001\002" +
    "\000\102\004\uffe6\012\uffe6\023\uffe6\025\uffe6\030\uffe6\036" +
    "\uffe6\040\uffe6\042\uffe6\044\uffe6\047\uffe6\051\uffe6\052\uffe6" +
    "\053\uffe6\054\uffe6\055\uffe6\056\uffe6\057\uffe6\063\uffe6\064" +
    "\uffe6\065\uffe6\066\uffe6\070\uffe6\071\uffe6\074\uffe6\075\uffe6" +
    "\077\uffe6\100\uffe6\102\uffe6\103\uffe6\104\uffe6\105\uffe6\106" +
    "\uffe6\001\002\000\010\004\026\047\025\112\370\001\002" +
    "\000\010\004\316\047\315\112\367\001\002\000\102\004" +
    "\uffee\012\uffee\023\uffee\025\uffee\030\uffee\036\uffee\040\uffee" +
    "\042\uffee\044\uffee\047\uffee\051\uffee\052\uffee\053\uffee\054" +
    "\uffee\055\uffee\056\uffee\057\uffee\063\uffee\064\uffee\065\uffee" +
    "\066\uffee\070\uffee\071\uffee\074\uffee\075\uffee\077\uffee\100" +
    "\uffee\102\uffee\103\uffee\104\uffee\105\uffee\106\uffee\001\002" +
    "\000\102\004\uffed\012\uffed\023\uffed\025\uffed\030\uffed\036" +
    "\uffed\040\uffed\042\uffed\044\uffed\047\uffed\051\uffed\052\uffed" +
    "\053\uffed\054\uffed\055\uffed\056\uffed\057\uffed\063\uffed\064" +
    "\uffed\065\uffed\066\uffed\070\uffed\071\uffed\074\uffed\075\uffed" +
    "\077\uffed\100\uffed\102\uffed\103\uffed\104\uffed\105\uffed\106" +
    "\uffed\001\002\000\102\004\uffdf\012\uffdf\023\uffdf\025\uffdf" +
    "\030\uffdf\036\uffdf\040\uffdf\042\uffdf\044\uffdf\047\uffdf\051" +
    "\uffdf\052\uffdf\053\uffdf\054\uffdf\055\uffdf\056\uffdf\057\uffdf" +
    "\063\uffdf\064\uffdf\065\uffdf\066\uffdf\070\uffdf\071\uffdf\074" +
    "\uffdf\075\uffdf\077\uffdf\100\uffdf\102\uffdf\103\uffdf\104\uffdf" +
    "\105\uffdf\106\uffdf\001\002\000\102\004\uffde\012\uffde\023" +
    "\uffde\025\uffde\030\uffde\036\uffde\040\uffde\042\uffde\044\uffde" +
    "\047\uffde\051\uffde\052\uffde\053\uffde\054\uffde\055\uffde\056" +
    "\uffde\057\uffde\063\uffde\064\uffde\065\uffde\066\uffde\070\uffde" +
    "\071\uffde\074\uffde\075\uffde\077\uffde\100\uffde\102\uffde\103" +
    "\uffde\104\uffde\105\uffde\106\uffde\001\002\000\102\004\ufff0" +
    "\012\ufff0\023\ufff0\025\ufff0\030\ufff0\036\ufff0\040\ufff0\042" +
    "\ufff0\044\ufff0\047\ufff0\051\ufff0\052\ufff0\053\ufff0\054\ufff0" +
    "\055\ufff0\056\ufff0\057\ufff0\063\ufff0\064\ufff0\065\ufff0\066" +
    "\ufff0\070\ufff0\071\ufff0\074\ufff0\075\ufff0\077\ufff0\100\ufff0" +
    "\102\ufff0\103\ufff0\104\ufff0\105\ufff0\106\ufff0\001\002\000" +
    "\102\004\uffe8\012\uffe8\023\uffe8\025\uffe8\030\uffe8\036\uffe8" +
    "\040\uffe8\042\uffe8\044\uffe8\047\uffe8\051\uffe8\052\uffe8\053" +
    "\uffe8\054\uffe8\055\uffe8\056\uffe8\057\uffe8\063\uffe8\064\uffe8" +
    "\065\uffe8\066\uffe8\070\uffe8\071\uffe8\074\uffe8\075\uffe8\077" +
    "\uffe8\100\uffe8\102\uffe8\103\uffe8\104\uffe8\105\uffe8\106\uffe8" +
    "\001\002\000\102\004\uff8a\012\uff8a\023\uff8a\025\uff8a\030" +
    "\uff8a\036\uff8a\040\uff8a\042\uff8a\044\uff8a\047\uff8a\051\uff8a" +
    "\052\uff8a\053\uff8a\054\uff8a\055\uff8a\056\uff8a\057\uff8a\063" +
    "\uff8a\064\uff8a\065\uff8a\066\uff8a\070\uff8a\071\uff8a\074\uff8a" +
    "\075\uff8a\077\uff8a\100\uff8a\102\uff8a\103\uff8a\104\uff8a\105" +
    "\uff8a\106\uff8a\001\002\000\044\004\035\012\040\023\057" +
    "\030\062\040\061\042\042\051\060\052\055\053\031\054" +
    "\056\055\045\056\033\057\030\063\052\064\036\065\053" +
    "\106\043\001\002\000\102\004\uffdc\012\uffdc\023\uffdc\025" +
    "\uffdc\030\uffdc\036\uffdc\040\uffdc\042\uffdc\044\uffdc\047\uffdc" +
    "\051\uffdc\052\uffdc\053\uffdc\054\uffdc\055\uffdc\056\uffdc\057" +
    "\uffdc\063\uffdc\064\uffdc\065\uffdc\066\uffdc\070\uffdc\071\uffdc" +
    "\074\uffdc\075\uffdc\077\uffdc\100\uffdc\102\uffdc\103\uffdc\104" +
    "\uffdc\105\uffdc\106\uffdc\001\002\000\004\112\u0101\001\002" +
    "\000\102\004\uffdd\012\uffdd\023\uffdd\025\uffdd\030\uffdd\036" +
    "\uffdd\040\uffdd\042\uffdd\044\uffdd\047\uffdd\051\uffdd\052\uffdd" +
    "\053\uffdd\054\uffdd\055\uffdd\056\uffdd\057\uffdd\063\uffdd\064" +
    "\uffdd\065\uffdd\066\uffdd\070\uffdd\071\uffdd\074\uffdd\075\uffdd" +
    "\077\uffdd\100\uffdd\102\uffdd\103\uffdd\104\uffdd\105\uffdd\106" +
    "\uffdd\001\002\000\004\025\u0103\001\002\000\076\003\255" +
    "\004\274\012\040\023\057\030\062\036\011\040\061\042" +
    "\042\044\260\047\262\051\060\052\055\053\031\054\056" +
    "\055\045\056\033\057\030\063\052\064\036\065\053\066" +
    "\246\070\267\071\242\074\263\077\266\100\020\103\333" +
    "\104\273\105\237\106\043\001\002\000\076\004\274\012" +
    "\040\023\057\025\u0105\030\062\036\011\040\061\042\042" +
    "\044\361\047\262\051\060\052\055\053\031\054\056\055" +
    "\045\056\033\057\030\063\052\064\036\065\053\066\246" +
    "\070\267\071\242\074\263\077\266\100\020\103\350\104" +
    "\273\105\237\106\043\001\002\000\102\004\uff79\012\uff79" +
    "\023\uff79\025\uff79\030\uff79\036\uff79\040\uff79\042\uff79\044" +
    "\uff79\047\uff79\051\uff79\052\uff79\053\uff79\054\uff79\055\uff79" +
    "\056\uff79\057\uff79\063\uff79\064\uff79\065\uff79\066\uff79\070" +
    "\uff79\071\uff79\074\uff79\075\uff79\077\uff79\100\uff79\102\uff79" +
    "\103\uff79\104\uff79\105\uff79\106\uff79\001\002\000\102\004" +
    "\uffe2\012\uffe2\023\uffe2\025\uffe2\030\uffe2\036\uffe2\040\uffe2" +
    "\042\uffe2\044\uffe2\047\uffe2\051\uffe2\052\uffe2\053\uffe2\054" +
    "\uffe2\055\uffe2\056\uffe2\057\uffe2\063\uffe2\064\uffe2\065\uffe2" +
    "\066\uffe2\070\uffe2\071\uffe2\074\uffe2\075\uffe2\077\uffe2\100" +
    "\uffe2\102\uffe2\103\uffe2\104\uffe2\105\uffe2\106\uffe2\001\002" +
    "\000\102\004\uff6f\012\uff6f\023\uff6f\025\uff6f\030\uff6f\036" +
    "\uff6f\040\uff6f\042\uff6f\044\uff6f\047\uff6f\051\uff6f\052\uff6f" +
    "\053\uff6f\054\uff6f\055\uff6f\056\uff6f\057\uff6f\063\uff6f\064" +
    "\uff6f\065\uff6f\066\uff6f\070\uff6f\071\uff6f\074\uff6f\075\uff6f" +
    "\077\uff6f\100\uff6f\102\uff6f\103\uff6f\104\uff6f\105\uff6f\106" +
    "\uff6f\001\002\000\014\031\u010d\032\u010c\033\u010b\034\u010a" +
    "\035\u0109\001\002\000\004\062\u0122\001\002\000\004\062" +
    "\u0120\001\002\000\004\062\u011e\001\002\000\004\062\u0116" +
    "\001\002\000\004\062\u010e\001\002\000\006\004\u010f\076" +
    "\u0110\001\002\000\010\004\uff94\047\uff94\112\uff94\001\002" +
    "\000\004\062\u0111\001\002\000\004\004\u0112\001\002\000" +
    "\004\110\u0113\001\002\000\004\023\u0114\001\002\000\004" +
    "\111\u0115\001\002\000\010\004\uff77\047\uff77\112\uff77\001" +
    "\002\000\006\004\u0117\076\u0118\001\002\000\010\004\uff93" +
    "\047\uff93\112\uff93\001\002\000\004\062\u0119\001\002\000" +
    "\004\004\u011a\001\002\000\004\110\u011b\001\002\000\004" +
    "\023\u011c\001\002\000\004\111\u011d\001\002\000\010\004" +
    "\uff76\047\uff76\112\uff76\001\002\000\004\004\u011f\001\002" +
    "\000\010\004\uff92\047\uff92\112\uff92\001\002\000\004\004" +
    "\u0121\001\002\000\010\004\uff91\047\uff91\112\uff91\001\002" +
    "\000\004\004\u0123\001\002\000\010\004\uff90\047\uff90\112" +
    "\uff90\001\002\000\102\004\uffc7\012\uffc7\023\uffc7\025\uffc7" +
    "\030\uffc7\036\uffc7\040\uffc7\042\uffc7\044\uffc7\047\uffc7\051" +
    "\uffc7\052\uffc7\053\uffc7\054\uffc7\055\uffc7\056\uffc7\057\uffc7" +
    "\063\uffc7\064\uffc7\065\uffc7\066\uffc7\070\uffc7\071\uffc7\074" +
    "\uffc7\075\uffc7\077\uffc7\100\uffc7\102\uffc7\103\uffc7\104\uffc7" +
    "\105\uffc7\106\uffc7\001\002\000\004\004\u0126\001\002\000" +
    "\004\107\u0127\001\002\000\004\025\u0128\001\002\000\004" +
    "\075\u012a\001\002\000\004\102\u0130\001\002\000\004\062" +
    "\u012b\001\002\000\022\004\120\012\040\023\057\030\062" +
    "\040\061\042\042\063\052\106\116\001\002\000\010\006" +
    "\137\012\140\062\u012d\001\002\000\076\003\255\004\274" +
    "\012\040\023\057\030\062\036\011\040\061\042\042\044" +
    "\260\047\262\051\060\052\055\053\031\054\056\055\045" +
    "\056\033\057\030\063\052\064\036\065\053\066\246\070" +
    "\267\071\242\074\263\077\266\100\020\103\333\104\273" +
    "\105\237\106\043\001\002\000\100\004\274\012\040\023" +
    "\057\030\062\036\011\040\061\042\042\044\361\047\262" +
    "\051\060\052\055\053\031\054\056\055\045\056\033\057" +
    "\030\063\052\064\036\065\053\066\246\070\267\071\242" +
    "\074\263\075\u012a\077\266\100\020\102\uff6a\103\350\104" +
    "\273\105\237\106\043\001\002\000\004\102\uff6b\001\002" +
    "\000\004\062\u0131\001\002\000\076\003\255\004\274\012" +
    "\040\023\057\030\062\036\011\040\061\042\042\044\260" +
    "\047\262\051\060\052\055\053\031\054\056\055\045\056" +
    "\033\057\030\063\052\064\036\065\053\066\246\070\267" +
    "\071\242\074\263\077\266\100\020\103\333\104\273\105" +
    "\237\106\043\001\002\000\076\004\274\012\040\023\057" +
    "\025\u0133\030\062\036\011\040\061\042\042\044\361\047" +
    "\262\051\060\052\055\053\031\054\056\055\045\056\033" +
    "\057\030\063\052\064\036\065\053\066\246\070\267\071" +
    "\242\074\263\077\266\100\020\103\350\104\273\105\237" +
    "\106\043\001\002\000\102\004\uff6c\012\uff6c\023\uff6c\025" +
    "\uff6c\030\uff6c\036\uff6c\040\uff6c\042\uff6c\044\uff6c\047\uff6c" +
    "\051\uff6c\052\uff6c\053\uff6c\054\uff6c\055\uff6c\056\uff6c\057" +
    "\uff6c\063\uff6c\064\uff6c\065\uff6c\066\uff6c\070\uff6c\071\uff6c" +
    "\074\uff6c\075\uff6c\077\uff6c\100\uff6c\102\uff6c\103\uff6c\104" +
    "\uff6c\105\uff6c\106\uff6c\001\002\000\102\004\uffd9\012\uffd9" +
    "\023\uffd9\025\uffd9\030\uffd9\036\uffd9\040\uffd9\042\uffd9\044" +
    "\uffd9\047\uffd9\051\uffd9\052\uffd9\053\uffd9\054\uffd9\055\uffd9" +
    "\056\uffd9\057\uffd9\063\uffd9\064\uffd9\065\uffd9\066\uffd9\070" +
    "\uffd9\071\uffd9\074\uffd9\075\uffd9\077\uffd9\100\uffd9\102\uffd9" +
    "\103\uffd9\104\uffd9\105\uffd9\106\uffd9\001\002\000\102\004" +
    "\uffc6\012\uffc6\023\uffc6\025\uffc6\030\uffc6\036\uffc6\040\uffc6" +
    "\042\uffc6\044\uffc6\047\uffc6\051\uffc6\052\uffc6\053\uffc6\054" +
    "\uffc6\055\uffc6\056\uffc6\057\uffc6\063\uffc6\064\uffc6\065\uffc6" +
    "\066\uffc6\070\uffc6\071\uffc6\074\uffc6\075\uffc6\077\uffc6\100" +
    "\uffc6\102\uffc6\103\uffc6\104\uffc6\105\uffc6\106\uffc6\001\002" +
    "\000\102\004\uffce\012\uffce\023\uffce\025\uffce\030\uffce\036" +
    "\uffce\040\uffce\042\uffce\044\uffce\047\uffce\051\uffce\052\uffce" +
    "\053\uffce\054\uffce\055\uffce\056\uffce\057\uffce\063\uffce\064" +
    "\uffce\065\uffce\066\uffce\070\uffce\071\uffce\074\uffce\075\uffce" +
    "\077\uffce\100\uffce\102\uffce\103\uffce\104\uffce\105\uffce\106" +
    "\uffce\001\002\000\044\004\035\012\040\023\057\030\062" +
    "\040\061\042\042\051\060\052\055\053\031\054\056\055" +
    "\045\056\033\057\030\063\052\064\036\065\053\106\043" +
    "\001\002\000\004\112\u0139\001\002\000\076\004\uffc5\012" +
    "\uffc5\023\uffc5\025\u013a\030\uffc5\036\uffc5\040\uffc5\042\uffc5" +
    "\044\uffc5\047\uffc5\051\uffc5\052\uffc5\053\uffc5\054\uffc5\055" +
    "\uffc5\056\uffc5\057\uffc5\063\uffc5\064\uffc5\065\uffc5\066\uffc5" +
    "\070\uffc5\071\uffc5\074\uffc5\077\uffc5\100\uffc5\103\uffc5\104" +
    "\uffc5\105\uffc5\106\uffc5\001\002\000\106\002\uff7f\003\uff7f" +
    "\004\uff7f\012\uff7f\023\uff7f\025\uff7f\030\uff7f\036\uff7f\040" +
    "\uff7f\042\uff7f\044\uff7f\047\uff7f\051\uff7f\052\uff7f\053\uff7f" +
    "\054\uff7f\055\uff7f\056\uff7f\057\uff7f\063\uff7f\064\uff7f\065" +
    "\uff7f\066\uff7f\070\uff7f\071\uff7f\074\uff7f\075\uff7f\077\uff7f" +
    "\100\uff7f\102\uff7f\103\uff7f\104\uff7f\105\uff7f\106\uff7f\001" +
    "\002\000\044\004\035\012\040\023\057\030\062\040\061" +
    "\042\042\051\060\052\055\053\031\054\056\055\045\056" +
    "\033\057\030\063\052\064\036\065\053\106\043\001\002" +
    "\000\004\107\u013d\001\002\000\004\025\u013e\001\002\000" +
    "\076\003\255\004\274\012\040\023\057\030\062\036\011" +
    "\040\061\042\042\044\260\047\262\051\060\052\055\053" +
    "\031\054\056\055\045\056\033\057\030\063\052\064\036" +
    "\065\053\066\246\070\267\071\242\074\263\077\266\100" +
    "\020\103\333\104\273\105\237\106\043\001\002\000\076" +
    "\004\274\012\040\023\057\025\u0140\030\062\036\011\040" +
    "\061\042\042\044\361\047\262\051\060\052\055\053\031" +
    "\054\056\055\045\056\033\057\030\063\052\064\036\065" +
    "\053\066\246\070\267\071\242\074\263\077\266\100\020" +
    "\103\350\104\273\105\237\106\043\001\002\000\104\004" +
    "\uff7a\012\uff7a\023\uff7a\025\uff7a\030\uff7a\036\uff7a\040\uff7a" +
    "\042\uff7a\044\uff7a\047\uff7a\051\uff7a\052\uff7a\053\uff7a\054" +
    "\uff7a\055\uff7a\056\uff7a\057\uff7a\063\uff7a\064\uff7a\065\uff7a" +
    "\066\uff7a\067\uff7a\070\uff7a\071\uff7a\074\uff7a\075\uff7a\077" +
    "\uff7a\100\uff7a\102\uff7a\103\uff7a\104\uff7a\105\uff7a\106\uff7a" +
    "\001\002\000\006\062\u0142\112\377\001\002\000\044\004" +
    "\035\012\040\023\057\030\062\040\061\042\042\051\060" +
    "\052\055\053\031\054\056\055\045\056\033\057\030\063" +
    "\052\064\036\065\053\106\043\001\002\000\004\112\u0144" +
    "\001\002\000\076\004\uffdd\012\uffdd\023\uffdd\025\u0145\030" +
    "\uffdd\036\uffdd\040\uffdd\042\uffdd\044\uffdd\047\uffdd\051\uffdd" +
    "\052\uffdd\053\uffdd\054\uffdd\055\uffdd\056\uffdd\057\uffdd\063" +
    "\uffdd\064\uffdd\065\uffdd\066\uffdd\070\uffdd\071\uffdd\074\uffdd" +
    "\077\uffdd\100\uffdd\103\uffdd\104\uffdd\105\uffdd\106\uffdd\001" +
    "\002\000\106\002\uff80\003\uff80\004\uff80\012\uff80\023\uff80" +
    "\025\uff80\030\uff80\036\uff80\040\uff80\042\uff80\044\uff80\047" +
    "\uff80\051\uff80\052\uff80\053\uff80\054\uff80\055\uff80\056\uff80" +
    "\057\uff80\063\uff80\064\uff80\065\uff80\066\uff80\070\uff80\071" +
    "\uff80\074\uff80\075\uff80\077\uff80\100\uff80\102\uff80\103\uff80" +
    "\104\uff80\105\uff80\106\uff80\001\002\000\102\004\uffd8\012" +
    "\uffd8\023\uffd8\025\uffd8\030\uffd8\036\uffd8\040\uffd8\042\uffd8" +
    "\044\uffd8\047\uffd8\051\uffd8\052\uffd8\053\uffd8\054\uffd8\055" +
    "\uffd8\056\uffd8\057\uffd8\063\uffd8\064\uffd8\065\uffd8\066\uffd8" +
    "\070\uffd8\071\uffd8\074\uffd8\075\uffd8\077\uffd8\100\uffd8\102" +
    "\uffd8\103\uffd8\104\uffd8\105\uffd8\106\uffd8\001\002\000\004" +
    "\004\u0148\001\002\000\004\062\u0149\001\002\000\004\072" +
    "\u014a\001\002\000\004\062\u014b\001\002\000\004\073\u014c" +
    "\001\002\000\004\106\u014d\001\002\000\044\004\035\012" +
    "\040\023\057\030\062\040\061\042\042\051\060\052\055" +
    "\053\031\054\056\055\045\056\033\057\030\063\052\064" +
    "\036\065\053\106\043\001\002\000\006\041\u014f\107\u0150" +
    "\001\002\000\044\004\035\012\040\023\057\030\062\040" +
    "\061\042\042\051\060\052\055\053\031\054\056\055\045" +
    "\056\033\057\030\063\052\064\036\065\053\106\043\001" +
    "\002\000\004\025\u0151\001\002\000\076\003\255\004\274" +
    "\012\040\023\057\030\062\036\011\040\061\042\042\044" +
    "\260\047\262\051\060\052\055\053\031\054\056\055\045" +
    "\056\033\057\030\063\052\064\036\065\053\066\246\070" +
    "\267\071\242\074\263\077\266\100\020\103\333\104\273" +
    "\105\237\106\043\001\002\000\076\004\274\012\040\023" +
    "\057\025\u0153\030\062\036\011\040\061\042\042\044\361" +
    "\047\262\051\060\052\055\053\031\054\056\055\045\056" +
    "\033\057\030\063\052\064\036\065\053\066\246\070\267" +
    "\071\242\074\263\077\266\100\020\103\350\104\273\105" +
    "\237\106\043\001\002\000\102\004\uff68\012\uff68\023\uff68" +
    "\025\uff68\030\uff68\036\uff68\040\uff68\042\uff68\044\uff68\047" +
    "\uff68\051\uff68\052\uff68\053\uff68\054\uff68\055\uff68\056\uff68" +
    "\057\uff68\063\uff68\064\uff68\065\uff68\066\uff68\070\uff68\071" +
    "\uff68\074\uff68\075\uff68\077\uff68\100\uff68\102\uff68\103\uff68" +
    "\104\uff68\105\uff68\106\uff68\001\002\000\006\041\u0155\107" +
    "\u0156\001\002\000\044\004\035\012\040\023\057\030\062" +
    "\040\061\042\042\051\060\052\055\053\031\054\056\055" +
    "\045\056\033\057\030\063\052\064\036\065\053\106\043" +
    "\001\002\000\004\025\u0157\001\002\000\076\003\255\004" +
    "\274\012\040\023\057\030\062\036\011\040\061\042\042" +
    "\044\260\047\262\051\060\052\055\053\031\054\056\055" +
    "\045\056\033\057\030\063\052\064\036\065\053\066\246" +
    "\070\267\071\242\074\263\077\266\100\020\103\333\104" +
    "\273\105\237\106\043\001\002\000\076\004\274\012\040" +
    "\023\057\025\u0159\030\062\036\011\040\061\042\042\044" +
    "\361\047\262\051\060\052\055\053\031\054\056\055\045" +
    "\056\033\057\030\063\052\064\036\065\053\066\246\070" +
    "\267\071\242\074\263\077\266\100\020\103\350\104\273" +
    "\105\237\106\043\001\002\000\102\004\uff69\012\uff69\023" +
    "\uff69\025\uff69\030\uff69\036\uff69\040\uff69\042\uff69\044\uff69" +
    "\047\uff69\051\uff69\052\uff69\053\uff69\054\uff69\055\uff69\056" +
    "\uff69\057\uff69\063\uff69\064\uff69\065\uff69\066\uff69\070\uff69" +
    "\071\uff69\074\uff69\075\uff69\077\uff69\100\uff69\102\uff69\103" +
    "\uff69\104\uff69\105\uff69\106\uff69\001\002\000\004\107\u015b" +
    "\001\002\000\004\025\u015c\001\002\000\076\003\255\004" +
    "\274\012\040\023\057\030\062\036\011\040\061\042\042" +
    "\044\260\047\262\051\060\052\055\053\031\054\056\055" +
    "\045\056\033\057\030\063\052\064\036\065\053\066\246" +
    "\070\267\071\242\074\263\077\266\100\020\103\333\104" +
    "\273\105\237\106\043\001\002\000\076\004\274\012\040" +
    "\023\057\025\u015e\030\062\036\011\040\061\042\042\044" +
    "\361\047\262\051\060\052\055\053\031\054\056\055\045" +
    "\056\033\057\030\063\052\064\036\065\053\066\246\070" +
    "\267\071\242\074\263\077\266\100\020\103\350\104\273" +
    "\105\237\106\043\001\002\000\102\004\uff67\012\uff67\023" +
    "\uff67\025\uff67\030\uff67\036\uff67\040\uff67\042\uff67\044\uff67" +
    "\047\uff67\051\uff67\052\uff67\053\uff67\054\uff67\055\uff67\056" +
    "\uff67\057\uff67\063\uff67\064\uff67\065\uff67\066\uff67\070\uff67" +
    "\071\uff67\074\uff67\075\uff67\077\uff67\100\uff67\102\uff67\103" +
    "\uff67\104\uff67\105\uff67\106\uff67\001\002\000\004\004\u0160" +
    "\001\002\000\004\107\u0161\001\002\000\004\112\u0162\001" +
    "\002\000\102\004\uffab\012\uffab\023\uffab\025\uffab\030\uffab" +
    "\036\uffab\040\uffab\042\uffab\044\uffab\047\uffab\051\uffab\052" +
    "\uffab\053\uffab\054\uffab\055\uffab\056\uffab\057\uffab\063\uffab" +
    "\064\uffab\065\uffab\066\uffab\070\uffab\071\uffab\074\uffab\075" +
    "\uffab\077\uffab\100\uffab\102\uffab\103\uffab\104\uffab\105\uffab" +
    "\106\uffab\001\002\000\004\002\ufffe\001\002\000\076\003" +
    "\255\004\274\012\040\023\057\030\062\036\011\040\061" +
    "\042\042\044\260\047\262\051\060\052\055\053\031\054" +
    "\056\055\045\056\033\057\030\063\052\064\036\065\053" +
    "\066\246\070\267\071\242\074\263\077\266\100\020\103" +
    "\u0166\104\273\105\237\106\043\001\002\000\074\004\274" +
    "\012\040\023\057\030\062\036\011\040\061\042\042\044" +
    "\361\047\262\051\060\052\055\053\031\054\056\055\045" +
    "\056\033\057\030\063\052\064\036\065\053\066\246\070" +
    "\267\071\242\074\263\077\266\100\020\103\u016b\104\273" +
    "\105\237\106\043\001\002\000\006\062\u0167\112\334\001" +
    "\002\000\044\004\035\012\040\023\057\030\062\040\061" +
    "\042\042\051\060\052\055\053\031\054\056\055\045\056" +
    "\033\057\030\063\052\064\036\065\053\106\043\001\002" +
    "\000\004\112\u0169\001\002\000\076\004\uffc5\012\uffc5\023" +
    "\uffc5\025\u016a\030\uffc5\036\uffc5\040\uffc5\042\uffc5\044\uffc5" +
    "\047\uffc5\051\uffc5\052\uffc5\053\uffc5\054\uffc5\055\uffc5\056" +
    "\uffc5\057\uffc5\063\uffc5\064\uffc5\065\uffc5\066\uffc5\070\uffc5" +
    "\071\uffc5\074\uffc5\077\uffc5\100\uffc5\103\uffc5\104\uffc5\105" +
    "\uffc5\106\uffc5\001\002\000\106\002\uff82\003\uff82\004\uff82" +
    "\012\uff82\023\uff82\025\uff82\030\uff82\036\uff82\040\uff82\042" +
    "\uff82\044\uff82\047\uff82\051\uff82\052\uff82\053\uff82\054\uff82" +
    "\055\uff82\056\uff82\057\uff82\063\uff82\064\uff82\065\uff82\066" +
    "\uff82\070\uff82\071\uff82\074\uff82\075\uff82\077\uff82\100\uff82" +
    "\102\uff82\103\uff82\104\uff82\105\uff82\106\uff82\001\002\000" +
    "\006\062\u016c\112\377\001\002\000\044\004\035\012\040" +
    "\023\057\030\062\040\061\042\042\051\060\052\055\053" +
    "\031\054\056\055\045\056\033\057\030\063\052\064\036" +
    "\065\053\106\043\001\002\000\004\112\u016e\001\002\000" +
    "\076\004\uffdd\012\uffdd\023\uffdd\025\u016f\030\uffdd\036\uffdd" +
    "\040\uffdd\042\uffdd\044\uffdd\047\uffdd\051\uffdd\052\uffdd\053" +
    "\uffdd\054\uffdd\055\uffdd\056\uffdd\057\uffdd\063\uffdd\064\uffdd" +
    "\065\uffdd\066\uffdd\070\uffdd\071\uffdd\074\uffdd\077\uffdd\100" +
    "\uffdd\103\uffdd\104\uffdd\105\uffdd\106\uffdd\001\002\000\106" +
    "\002\uff83\003\uff83\004\uff83\012\uff83\023\uff83\025\uff83\030" +
    "\uff83\036\uff83\040\uff83\042\uff83\044\uff83\047\uff83\051\uff83" +
    "\052\uff83\053\uff83\054\uff83\055\uff83\056\uff83\057\uff83\063" +
    "\uff83\064\uff83\065\uff83\066\uff83\070\uff83\071\uff83\074\uff83" +
    "\075\uff83\077\uff83\100\uff83\102\uff83\103\uff83\104\uff83\105" +
    "\uff83\106\uff83\001\002\000\014\031\u0175\032\u0173\033\u0174" +
    "\034\u0172\035\u0171\001\002\000\004\062\u017f\001\002\000" +
    "\004\062\u017d\001\002\000\004\062\u017b\001\002\000\004" +
    "\062\u0179\001\002\000\004\062\u0176\001\002\000\006\004" +
    "\u0178\037\u0177\001\002\000\004\025\uff81\001\002\000\004" +
    "\025\uff88\001\002\000\004\004\u017a\001\002\000\004\025" +
    "\uff84\001\002\000\004\004\u017c\001\002\000\004\025\uff87" +
    "\001\002\000\004\004\u017e\001\002\000\004\025\uff86\001" +
    "\002\000\004\004\u0180\001\002\000\004\025\uff85\001\002" +
    "\000\012\002\ufff6\003\021\036\011\100\020\001\002\000" +
    "\004\002\ufffc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0180\000\006\004\004\055\003\001\001\000\024\013" +
    "\012\014\016\033\013\034\011\047\006\050\007\051\021" +
    "\053\015\054\014\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\023\316\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\013\012\014\016\033" +
    "\013\034\011\047\u0162\050\007\051\021\053\015\054\014" +
    "\001\001\000\002\001\001\000\024\013\012\014\016\033" +
    "\013\034\011\047\231\050\007\051\021\053\015\054\014" +
    "\001\001\000\024\013\012\014\016\033\013\034\011\047" +
    "\230\050\007\051\021\053\015\054\014\001\001\000\024" +
    "\013\012\014\016\033\013\034\011\047\227\050\007\051" +
    "\021\053\015\054\014\001\001\000\002\001\001\000\024" +
    "\013\012\014\016\033\013\034\011\047\172\050\007\051" +
    "\021\053\015\054\014\001\001\000\004\006\023\001\001" +
    "\000\024\013\012\014\016\033\013\034\011\047\171\050" +
    "\007\051\021\053\015\054\014\001\001\000\002\001\001" +
    "\000\032\010\043\011\046\012\050\031\036\035\167\036" +
    "\062\037\045\040\047\042\040\043\053\044\031\046\063" +
    "\001\001\000\002\001\001\000\032\010\043\011\046\012" +
    "\050\031\036\035\033\036\062\037\045\040\047\042\040" +
    "\043\053\044\031\046\063\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\041\164\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\031\160\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\010\152\011\046\012\050\031" +
    "\036\036\156\037\155\040\047\042\040\043\053\044\031" +
    "\046\063\001\001\000\004\040\150\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\010\146" +
    "\011\046\012\050\031\036\036\147\040\047\042\040\043" +
    "\053\044\031\046\063\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\043\053\044\110\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\041\064\001\001\000\002\001\001\000\032\010\043" +
    "\011\046\012\050\031\036\035\067\036\062\037\045\040" +
    "\047\042\040\043\053\044\031\046\063\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\011\144\031\036\042\040\043\053\044\031\046" +
    "\063\001\001\000\016\011\143\031\036\042\040\043\053" +
    "\044\031\046\063\001\001\000\016\011\142\031\036\042" +
    "\040\043\053\044\031\046\063\001\001\000\016\011\116" +
    "\031\036\042\040\043\053\044\031\046\063\001\001\000" +
    "\022\010\134\011\046\012\050\031\036\042\040\043\053" +
    "\044\031\046\063\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\010\043" +
    "\011\046\012\050\031\036\035\126\036\062\037\045\040" +
    "\047\042\040\043\053\044\031\045\127\046\063\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\010\043\011\046\012\050\031\036\035" +
    "\126\036\062\037\045\040\047\042\040\043\053\044\031" +
    "\045\133\046\063\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\011\046\012\141\031\036" +
    "\042\040\043\053\044\031\046\063\001\001\000\020\011" +
    "\046\012\140\031\036\042\040\043\053\044\031\046\063" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\010\152" +
    "\011\046\012\050\031\036\036\153\040\047\042\040\043" +
    "\053\044\031\046\063\001\001\000\004\040\150\001\001" +
    "\000\002\001\001\000\022\010\151\011\046\012\050\031" +
    "\036\042\040\043\053\044\031\046\063\001\001\000\002" +
    "\001\001\000\004\040\150\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\041\064\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\010\162\011" +
    "\046\012\050\031\036\042\040\043\053\044\031\046\063" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\010" +
    "\043\011\046\012\050\031\036\035\165\036\062\037\045" +
    "\040\047\042\040\043\053\044\031\046\063\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\106\005\255\006\237\007\243\010" +
    "\043\011\046\012\050\013\246\014\252\016\263\017\244" +
    "\020\267\021\234\022\242\023\250\024\264\026\235\030" +
    "\256\031\036\032\233\033\013\034\011\035\260\036\062" +
    "\037\045\040\047\042\040\043\053\044\031\046\063\050" +
    "\271\051\270\052\240\053\253\054\251\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\u0106\001\001\000\104\005\355\006\342\010" +
    "\043\011\046\012\050\013\346\014\352\016\361\017\345" +
    "\020\363\021\340\022\344\023\350\024\362\026\341\030" +
    "\356\031\036\032\337\033\013\034\011\035\357\036\062" +
    "\037\045\040\047\042\040\043\053\044\031\046\063\050" +
    "\365\051\364\052\343\053\353\054\351\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\374\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\010\043\011\046\012\050\031\036\035\167\036" +
    "\062\037\045\040\047\042\040\043\053\044\031\046\063" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\023\001\001\000\004\023\316\001\001\000" +
    "\002\001\001\000\004\041\164\001\001\000\032\010\043" +
    "\011\046\012\050\031\036\035\033\036\062\037\045\040" +
    "\047\042\040\043\053\044\031\046\063\001\001\000\024" +
    "\010\276\011\046\012\050\025\277\031\036\042\040\043" +
    "\053\044\031\046\063\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\010" +
    "\276\011\046\012\050\025\303\031\036\042\040\043\053" +
    "\044\031\046\063\001\001\000\002\001\001\000\004\031" +
    "\305\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\010\276\011" +
    "\046\012\050\025\321\031\036\042\040\043\053\044\031" +
    "\046\063\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\010\043\011\046" +
    "\012\050\031\036\035\326\036\062\037\045\040\047\042" +
    "\040\043\053\044\031\046\063\001\001\000\002\001\001" +
    "\000\002\001\001\000\106\005\255\006\237\007\331\010" +
    "\043\011\046\012\050\013\246\014\252\016\263\017\244" +
    "\020\267\021\234\022\242\023\250\024\264\026\235\030" +
    "\256\031\036\032\233\033\013\034\011\035\260\036\062" +
    "\037\045\040\047\042\040\043\053\044\031\046\063\050" +
    "\271\051\270\052\240\053\253\054\251\001\001\000\104" +
    "\005\355\006\342\010\043\011\046\012\050\013\346\014" +
    "\352\016\361\017\345\020\363\021\340\022\344\023\350" +
    "\024\362\026\341\030\356\031\036\032\337\033\013\034" +
    "\011\035\357\036\062\037\045\040\047\042\040\043\053" +
    "\044\031\046\063\050\365\051\364\052\343\053\353\054" +
    "\351\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\010\043\011\046\012\050\031\036\035\335\036\062\037" +
    "\045\040\047\042\040\043\053\044\031\046\063\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\023\u0106\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\374\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\023\001\001\000\004" +
    "\023\316\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\010\043\011\046\012" +
    "\050\031\036\035\377\036\062\037\045\040\047\042\040" +
    "\043\053\044\031\046\063\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\106" +
    "\005\255\006\237\007\u0103\010\043\011\046\012\050\013" +
    "\246\014\252\016\263\017\244\020\267\021\234\022\242" +
    "\023\250\024\264\026\235\030\256\031\036\032\233\033" +
    "\013\034\011\035\260\036\062\037\045\040\047\042\040" +
    "\043\053\044\031\046\063\050\271\051\270\052\240\053" +
    "\253\054\251\001\001\000\104\005\355\006\342\010\043" +
    "\011\046\012\050\013\346\014\352\016\361\017\345\020" +
    "\363\021\340\022\344\023\350\024\362\026\341\030\356" +
    "\031\036\032\337\033\013\034\011\035\357\036\062\037" +
    "\045\040\047\042\040\043\053\044\031\046\063\050\365" +
    "\051\364\052\343\053\353\054\351\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\027\u0128\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\010\u012b\011" +
    "\046\012\050\031\036\042\040\043\053\044\031\046\063" +
    "\001\001\000\002\001\001\000\106\005\255\006\237\007" +
    "\u012d\010\043\011\046\012\050\013\246\014\252\016\263" +
    "\017\244\020\267\021\234\022\242\023\250\024\264\026" +
    "\235\030\256\031\036\032\233\033\013\034\011\035\260" +
    "\036\062\037\045\040\047\042\040\043\053\044\031\046" +
    "\063\050\271\051\270\052\240\053\253\054\251\001\001" +
    "\000\106\005\355\006\342\010\043\011\046\012\050\013" +
    "\346\014\352\016\361\017\345\020\363\021\340\022\344" +
    "\023\350\024\362\026\341\027\u012e\030\356\031\036\032" +
    "\337\033\013\034\011\035\357\036\062\037\045\040\047" +
    "\042\040\043\053\044\031\046\063\050\365\051\364\052" +
    "\343\053\353\054\351\001\001\000\002\001\001\000\002" +
    "\001\001\000\106\005\255\006\237\007\u0131\010\043\011" +
    "\046\012\050\013\246\014\252\016\263\017\244\020\267" +
    "\021\234\022\242\023\250\024\264\026\235\030\256\031" +
    "\036\032\233\033\013\034\011\035\260\036\062\037\045" +
    "\040\047\042\040\043\053\044\031\046\063\050\271\051" +
    "\270\052\240\053\253\054\251\001\001\000\104\005\355" +
    "\006\342\010\043\011\046\012\050\013\346\014\352\016" +
    "\361\017\345\020\363\021\340\022\344\023\350\024\362" +
    "\026\341\030\356\031\036\032\337\033\013\034\011\035" +
    "\357\036\062\037\045\040\047\042\040\043\053\044\031" +
    "\046\063\050\365\051\364\052\343\053\353\054\351\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\010\043\011\046\012\050\031" +
    "\036\035\u0137\036\062\037\045\040\047\042\040\043\053" +
    "\044\031\046\063\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\010\043\011\046\012\050" +
    "\031\036\035\u013b\036\062\037\045\040\047\042\040\043" +
    "\053\044\031\046\063\001\001\000\002\001\001\000\002" +
    "\001\001\000\106\005\255\006\237\007\u013e\010\043\011" +
    "\046\012\050\013\246\014\252\016\263\017\244\020\267" +
    "\021\234\022\242\023\250\024\264\026\235\030\256\031" +
    "\036\032\233\033\013\034\011\035\260\036\062\037\045" +
    "\040\047\042\040\043\053\044\031\046\063\050\271\051" +
    "\270\052\240\053\253\054\251\001\001\000\104\005\355" +
    "\006\342\010\043\011\046\012\050\013\346\014\352\016" +
    "\361\017\345\020\363\021\340\022\344\023\350\024\362" +
    "\026\341\030\356\031\036\032\337\033\013\034\011\035" +
    "\357\036\062\037\045\040\047\042\040\043\053\044\031" +
    "\046\063\050\365\051\364\052\343\053\353\054\351\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\010\043" +
    "\011\046\012\050\031\036\035\u0142\036\062\037\045\040" +
    "\047\042\040\043\053\044\031\046\063\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\010\043\011\046\012\050\031\036\035\u014d\036\062" +
    "\037\045\040\047\042\040\043\053\044\031\046\063\001" +
    "\001\000\002\001\001\000\032\010\043\011\046\012\050" +
    "\031\036\035\u0153\036\062\037\045\040\047\042\040\043" +
    "\053\044\031\046\063\001\001\000\002\001\001\000\106" +
    "\005\255\006\237\007\u0151\010\043\011\046\012\050\013" +
    "\246\014\252\016\263\017\244\020\267\021\234\022\242" +
    "\023\250\024\264\026\235\030\256\031\036\032\233\033" +
    "\013\034\011\035\260\036\062\037\045\040\047\042\040" +
    "\043\053\044\031\046\063\050\271\051\270\052\240\053" +
    "\253\054\251\001\001\000\104\005\355\006\342\010\043" +
    "\011\046\012\050\013\346\014\352\016\361\017\345\020" +
    "\363\021\340\022\344\023\350\024\362\026\341\030\356" +
    "\031\036\032\337\033\013\034\011\035\357\036\062\037" +
    "\045\040\047\042\040\043\053\044\031\046\063\050\365" +
    "\051\364\052\343\053\353\054\351\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\010\043\011\046\012\050" +
    "\031\036\035\u0159\036\062\037\045\040\047\042\040\043" +
    "\053\044\031\046\063\001\001\000\002\001\001\000\106" +
    "\005\255\006\237\007\u0157\010\043\011\046\012\050\013" +
    "\246\014\252\016\263\017\244\020\267\021\234\022\242" +
    "\023\250\024\264\026\235\030\256\031\036\032\233\033" +
    "\013\034\011\035\260\036\062\037\045\040\047\042\040" +
    "\043\053\044\031\046\063\050\271\051\270\052\240\053" +
    "\253\054\251\001\001\000\104\005\355\006\342\010\043" +
    "\011\046\012\050\013\346\014\352\016\361\017\345\020" +
    "\363\021\340\022\344\023\350\024\362\026\341\030\356" +
    "\031\036\032\337\033\013\034\011\035\357\036\062\037" +
    "\045\040\047\042\040\043\053\044\031\046\063\050\365" +
    "\051\364\052\343\053\353\054\351\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\106\005\255" +
    "\006\237\007\u015c\010\043\011\046\012\050\013\246\014" +
    "\252\016\263\017\244\020\267\021\234\022\242\023\250" +
    "\024\264\026\235\030\256\031\036\032\233\033\013\034" +
    "\011\035\260\036\062\037\045\040\047\042\040\043\053" +
    "\044\031\046\063\050\271\051\270\052\240\053\253\054" +
    "\251\001\001\000\104\005\355\006\342\010\043\011\046" +
    "\012\050\013\346\014\352\016\361\017\345\020\363\021" +
    "\340\022\344\023\350\024\362\026\341\030\356\031\036" +
    "\032\337\033\013\034\011\035\357\036\062\037\045\040" +
    "\047\042\040\043\053\044\031\046\063\050\365\051\364" +
    "\052\343\053\353\054\351\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\106\005\255\006\237\007" +
    "\u0164\010\043\011\046\012\050\013\246\014\252\016\263" +
    "\017\244\020\267\021\234\022\242\023\250\024\264\026" +
    "\235\030\256\031\036\032\233\033\013\034\011\035\260" +
    "\036\062\037\045\040\047\042\040\043\053\044\031\046" +
    "\063\050\271\051\270\052\240\053\253\054\251\001\001" +
    "\000\104\005\355\006\342\010\043\011\046\012\050\013" +
    "\346\014\352\016\361\017\345\020\363\021\340\022\344" +
    "\023\350\024\362\026\341\030\356\031\036\032\337\033" +
    "\013\034\011\035\357\036\062\037\045\040\047\042\040" +
    "\043\053\044\031\046\063\050\365\051\364\052\343\053" +
    "\353\054\351\001\001\000\002\001\001\000\032\010\043" +
    "\011\046\012\050\031\036\035\u0167\036\062\037\045\040" +
    "\047\042\040\043\053\044\031\046\063\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\010\043\011\046\012\050\031\036\035\u016c" +
    "\036\062\037\045\040\047\042\040\043\053\044\031\046" +
    "\063\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\013\012\014\016\033\013" +
    "\034\011\047\u0181\050\007\051\021\053\015\054\014\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
return lex.next_token();
    }


    // Connect this parser to a scanner!
    Lexer lex;
    HashMap<String, ArrayList<String>> scopePrograma = new HashMap<String, ArrayList<String>>();
    String currentHash;
    String globalHash = "SCOPE GLOBAL";

    @SuppressWarnings("deprecation")
    public Parser(Lexer lex) {
        this.lex = lex;
        this.symbolFactory = new DefaultSymbolFactory();
    }

    public boolean existeVar(String ID, String tipo) {
        ArrayList<String> ts = scopePrograma.get(currentHash);
        String comparado = "Instancia loc: " + ID.toString() + ":" + tipo;

        for (String variable : ts) {
            if (variable.equals(comparado)) {return true;}
        }

        return false;
    }

    public boolean existeVarNoT(String ID) {
        ArrayList<String> ts = scopePrograma.get(currentHash);
        ArrayList<String> ts2 = scopePrograma.get(globalHash);
        
        for (String variable : ts) {
            String[] elementosVar = variable.split(":");
            
            if (elementosVar[1].trim().equals(ID)) {return true;}
        }
        for (String variable2 : ts2) {
            String[] elementosVar2 = variable2.split(":");
            
            if (elementosVar2[1].trim().equals(ID)) {return true;}
        }

        return false;
    }

    public String getTipo(String ID) {
        ArrayList<String> ts = scopePrograma.get(currentHash);
        ArrayList<String> ts2 = scopePrograma.get(globalHash);

        for (String variable : ts) {
            String[] elementosVar = variable.split(":");
            if (elementosVar[1].trim().equals(ID)) {return elementosVar[2];}
        }

        for (String variable : ts2) {
            String[] elementosVar = variable.split(":");
            if (elementosVar[1].trim().equals(ID)) {return elementosVar[2];}
        }

        return "null";
    }

    public String getTipoFunc(String ID) {
        for (String key : scopePrograma.keySet()) {
            ArrayList<String> value = scopePrograma.get(key);
            for (String elemento : value) {
                String[] ts = elemento.split(":");
                if (ID.equals(key)) {
                    return ts[2];
                }
            }
        } 

        return "null";
    }

    public boolean existeVarGlob(String ID, String tipo) {
        ArrayList<String> ts = scopePrograma.get(globalHash);
        String comparado = "Instancia GLOB: " + ID.toString() + ":" + tipo;
        
        for (String variable : ts) {
            if (variable.equals(comparado)) {return true;}
        }

        return false;
    }

    public boolean existeFun(String ID, String tipo) {
        for (String key : scopePrograma.keySet()) {
            ArrayList<String> value = scopePrograma.get(key);
            for (String elemento : value) {
                String[] ts = elemento.split(":");
                if (ts.length >= 3 && ts[1].equals("func") && ts[2].equals(tipo) && ID.equals(key)) {
                    return true;
                }
            }
        } 

        return false;
    }

    public void imprimirscopePrograma () {
        System.out.println("\nTABLA DE SIMBOLOS");
        for (String key: scopePrograma.keySet()) {
            System.out.println("\n" + key);
            System.out.println("Valores: ");
            for (String item : scopePrograma.get(key)) {
                System.out.println(item);
            }
            System.out.println("");
        }
    }

    public boolean existeArrGlob(String ID, String tipo) {
        ArrayList<String> ts = scopePrograma.get(globalHash);
        String comparado = "Instancia GLOB ARR: " + ID.toString() + ":" + tipo;
        
        for (String variable : ts) {
            if (variable.equals(comparado)) {return true;}
        }

        return false;
    }

    public boolean existeArr(String ID, String tipo) {
        ArrayList<String> ts = scopePrograma.get(currentHash);
        String comparado = "Instancia LOC ARR: " + ID.toString() + ":" + tipo;

        for (String variable : ts) {

            if (variable.equals(comparado)) {return true;}
        }

        return false;
    }


    //recuperacion de errores de sintaxis
    public void syntax_error(Symbol s) {
        System.out.println("!!Error de Sintaxis en : " +  s.value + " linea: " +  (s.left+1) +  " columna: " +  (s.right+1));
    }

    //manejo de errores fatales
    public void unrecovered_syntax_error(Symbol s) {
        System.out.println("!!Error fatal en : " +  s.value + " linea: " +  (s.left+1) +  " columna: " +  (s.right+1));
    } 


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= SI EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
 scopePrograma.put(globalHash, new ArrayList<String>()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // SI ::= NT$0 GEN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SI",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // GEN ::= funcStruc GEN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GEN",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // GEN ::= mainStruc GEN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GEN",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // GEN ::= arrayInsGl ENDEXPR GEN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GEN",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // GEN ::= varInsGl ENDEXPR GEN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GEN",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // GEN ::= varInsAsigGl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GEN",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // GEN ::= varInsAsigGl GEN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GEN",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // GEN ::= funcStruc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GEN",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // GEN ::= mainStruc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GEN",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // GEN ::= arrayInsGl ENDEXPR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GEN",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // GEN ::= varInsGl ENDEXPR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GEN",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // GEN ::= error 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GEN",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // GEN ::= error GEN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GEN",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // GEN ::= arrayInsAsignGl GEN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GEN",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // GEN ::= arrayInsAsignGl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GEN",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // BLOCK ::= BLOCK exprP ENDEXPR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // BLOCK ::= BLOCK varAsig 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // BLOCK ::= BLOCK arrayInsGl ENDEXPR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // BLOCK ::= BLOCK varInsGl ENDEXPR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // BLOCK ::= BLOCK varInsAsigGl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // BLOCK ::= BLOCK arrayInsAsignGl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // BLOCK ::= BLOCK mainStruc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // BLOCK ::= BLOCK funcStruc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // BLOCK ::= BLOCK varIns ENDEXPR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // BLOCK ::= BLOCK ifStruc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // BLOCK ::= BLOCK ifElseStruc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // BLOCK ::= BLOCK whileStruc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // BLOCK ::= BLOCK switchStruc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // BLOCK ::= BLOCK forStruc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // BLOCK ::= BLOCK arrayIns ENDEXPR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // BLOCK ::= BLOCK varInsAsig 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // BLOCK ::= BLOCK arrayInsAsign 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // BLOCK ::= BLOCK printStruc ENDEXPR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // BLOCK ::= BLOCK BREAK ENDEXPR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // BLOCK ::= BLOCK RETURN SEP exprP ENDEXPR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // BLOCK ::= BLOCK RETURN ENDEXPR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // BLOCK ::= BLOCK inputStruc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // BLOCK ::= BLOCK arrayAsig 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // BLOCK ::= exprP ENDEXPR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // BLOCK ::= arrayIns ENDEXPR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // BLOCK ::= arrayInsAsign 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // BLOCK ::= mainStruc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // BLOCK ::= funcStruc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // BLOCK ::= varAsig 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // BLOCK ::= arrayInsGl ENDEXPR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // BLOCK ::= varInsGl ENDEXPR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // BLOCK ::= varInsAsigGl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // BLOCK ::= arrayInsAsignGl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // BLOCK ::= varInsAsig 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // BLOCK ::= varIns ENDEXPR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // BLOCK ::= ifStruc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // BLOCK ::= ifElseStruc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // BLOCK ::= switchStruc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // BLOCK ::= forStruc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // BLOCK ::= arrayAsig 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // BLOCK ::= whileStruc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // BLOCK ::= printStruc ENDEXPR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // BLOCK ::= BREAK ENDEXPR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // BLOCK ::= RETURN SEP exprP ENDEXPR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // BLOCK ::= RETURN ENDEXPR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // BLOCK ::= inputStruc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // BLOCK ::= error 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // numbers ::= INTEGER_LITERAL 
            {
              Object RESULT =null;
		RESULT = "INT";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numbers",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // numbers ::= FLOATNUM 
            {
              Object RESULT =null;
		RESULT = "FLOAT";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numbers",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // compAritOp ::= term 
            {
              Object RESULT =null;
		int op2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = op2;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compAritOp",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // compAritOp ::= compAritOp PLUS term 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if(!op1.equals(op2)) {System.out.println("Error semantico, en esta suma los operadores deben ser del mismo tipo");} else {RESULT = op1;}
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compAritOp",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // compAritOp ::= compAritOp MINUSW term 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if(!op1.equals(op2)) {System.out.println("Error semantico, en esta resta los operadores deben ser del mismo tipo");} else {RESULT = op1;}
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compAritOp",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // term ::= factor 
            {
              Object RESULT =null;
		int op2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = op2;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // term ::= term PRODUCT factor 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if(!op1.equals(op2)) {System.out.println("Error semantico, en este producto los operadores deben ser del mismo tipo");} else {RESULT = op1;}
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // term ::= term DIVISION factor 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if(!op1.equals(op2)) {System.out.println("Error semantico, en este cociente los operadores deben ser del mismo tipo");} else {RESULT = op1;}
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // term ::= term POWER factor 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if(!op1.equals(op2)) {System.out.println("Error semantico, en esta potencia los operadores deben ser del mismo tipo");} else {RESULT = op1;}
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // term ::= term MODULUS factor 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if(!op1.equals(op2)) {System.out.println("Error semantico, en este modulo los operadores deben ser del mismo tipo");} else {RESULT = op1;}
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // factor ::= numbers 
            {
              Object RESULT =null;
		int numeroleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int numeroright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object numero = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = numero;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // factor ::= MINUSW numbers 
            {
              Object RESULT =null;
		int numeroleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int numeroright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object numero = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = numero;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // factor ::= STRING_LITERAL 
            {
              Object RESULT =null;
		RESULT = "STRING";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // factor ::= CHARSTR 
            {
              Object RESULT =null;
		RESULT = "CHAR";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // factor ::= IDENTIFIER 
            {
              Object RESULT =null;
		int IDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ID = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		String tipo = getTipo(ID.toString()); RESULT = tipo;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // factor ::= IDENTIFIER DMINUS 
            {
              Object RESULT =null;
		int IDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ID = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		String tipo = getTipo(ID.toString()); RESULT = tipo;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // factor ::= IDENTIFIER DPLUS 
            {
              Object RESULT =null;
		int IDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ID = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		String tipo = getTipo(ID.toString()); RESULT = tipo;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // factor ::= arrayElement 
            {
              Object RESULT =null;
		int arrEleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int arrEright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object arrE = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = arrE;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // factor ::= paramList 
            {
              Object RESULT =null;
		int pLisleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pLisright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object pLis = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = pLis;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // factor ::= funcInvo 
            {
              Object RESULT =null;
		int funIleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int funIright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object funI = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = funI;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // factor ::= MINUSW PARENTS compAritOp PARENTC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // factor ::= PARENTS compAritOp PARENTC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // inputStruc ::= INPUT PARENTS IDENTIFIER PARENTC ENDEXPR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inputStruc",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // exprP ::= exprLog 
            {
              Object RESULT =null;
		int expLleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expLright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object expL = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = expL;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprP",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // exprP ::= compAritOp 
            {
              Object RESULT =null;
		int compleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int compright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object comp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = comp;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprP",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // exprP ::= exprUni 
            {
              Object RESULT =null;
		int expUleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expUright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object expU = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = expU;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprP",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // exprLog ::= compAritOp opRel compAritOp 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if(!op1.equals(op2)) {System.out.println("Error, la comparacion debe ser entre valores del mismo tipo"); RESULT = "NULL";} else {System.out.println("dasdd"); RESULT = "BOOL";} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprLog",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // exprLog ::= PARENTS exprLog PARENTC 
            {
              Object RESULT =null;
		int op2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = op2;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprLog",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // exprLog ::= opRel exprLog 
            {
              Object RESULT =null;
		int op2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = op2;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprLog",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // exprLog ::= TRUE 
            {
              Object RESULT =null;
		RESULT = "BOOL";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprLog",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // exprLog ::= FALSE 
            {
              Object RESULT =null;
		RESULT = "BOOL";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprLog",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // exprUni ::= exprLog opLog exprP 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if(op1.equals("BOOL") && op2.equals("BOOL")) {RESULT = "BOOL";} else {System.out.println("Ambos operadores deben ser booleanos"); RESULT = "NULL";}
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprUni",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // exprUni ::= IDENTIFIER opLog exprP 
            {
              Object RESULT =null;
		int IDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object ID = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                                            String tipo = getTipo(ID.toString());
                                            if(tipo.equals("BOOL") && op2.equals("BOOL")) {RESULT = "BOOL";} else {System.out.println("Ambos operadores deben ser booleanos"); RESULT = "NULL";} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprUni",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // exprUni ::= PARENTS exprUni PARENTC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprUni",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // opRel ::= GRATHER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opRel",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // opRel ::= GRATHERT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opRel",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // opRel ::= LOWER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opRel",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // opRel ::= LOWERT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opRel",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // opRel ::= DIFF 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opRel",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // opRel ::= COMPARATION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opRel",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // opRel ::= NEGATION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opRel",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // opLog ::= AND 
            {
              Object RESULT =null;
		RESULT = "AND";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opLog",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // opLog ::= OR 
            {
              Object RESULT =null;
		RESULT = "OR";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opLog",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // varAsig ::= IDENTIFIER EQ exprP ENDEXPR 
            {
              Object RESULT =null;
		int IDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object ID = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                                                    String tipo = getTipo(ID.toString());
                                                    boolean existe = existeVar(ID.toString(), tipo);
                                                    boolean existe2 = existeVarGlob(ID.toString(), tipo);
                                                    if (!existe && !existe2) {System.out.println("Esta variable -> " + ID.toString() + " <- no existe");}
                                                    if(!tipo.equals(val)) {System.out.println("Error semantico, el tipo de la variable no coincide con el asignado");} else {RESULT = tipo;}
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varAsig",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // varAsig ::= EQ exprP ENDEXPR 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varAsig",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // varIns ::= LOC SEP INT SEP IDENTIFIER 
            {
              Object RESULT =null;
		int IDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ID = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                    boolean existe = existeVar(ID.toString(), "INT");
                                                    if (existe) {System.out.println("La variable local -> " + ID.toString() + " <- ya fue declarada");}  
                                                    scopePrograma.get(currentHash).add("Instancia loc: " + ID.toString() + ":" + "INT");   
                                                    RESULT = "INT";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varIns",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // varIns ::= LOC SEP CHAR SEP IDENTIFIER 
            {
              Object RESULT =null;
		int IDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ID = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                                                    boolean existe = existeVar(ID.toString(), "CHAR");
                                                    if (existe) {System.out.println("La variable local -> " + ID.toString() + " <- ya fue declarada");}  
                                                    scopePrograma.get(currentHash).add("Instancia loc: " + ID.toString() + ":" + "CHAR");  
                                                    RESULT = "CHAR";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varIns",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // varIns ::= LOC SEP FLOAT SEP IDENTIFIER 
            {
              Object RESULT =null;
		int IDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ID = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                                                    boolean existe = existeVar(ID.toString(), "FLOAT");
                                                    if (existe) {System.out.println("La variable local -> " + ID.toString() + " <- ya fue declarada");} 
                                                    scopePrograma.get(currentHash).add("Instancia loc: " + ID.toString() + ":" + "FLOAT");  
                                                    RESULT = "FLOAT";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varIns",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // varIns ::= LOC SEP BOOL SEP IDENTIFIER 
            {
              Object RESULT =null;
		int IDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ID = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                                                    boolean existe = existeVar(ID.toString(), "BOOL");
                                                    if (existe) {System.out.println("La variable local -> " + ID.toString() + " <- ya fue declarada");}  
                                                    scopePrograma.get(currentHash).add("Instancia loc: " + ID.toString() + ":" + "BOOL");  
                                                    RESULT = "BOOL";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varIns",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // varIns ::= LOC SEP STRINGT SEP IDENTIFIER 
            {
              Object RESULT =null;
		int IDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ID = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                                                    boolean existe = existeVar(ID.toString(), "STRING");
                                                    if (existe) {System.out.println("La variable local -> " + ID.toString() + " <- ya fue declarada");} 
                                                    scopePrograma.get(currentHash).add("Instancia loc: " + ID.toString() + ":" + "STRING"); 
                                                    RESULT = "STRING";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varIns",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // varInsGl ::= GLOB SEP INT SEP IDENTIFIER 
            {
              Object RESULT =null;
		int IDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ID = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                                                        boolean existe = existeVarGlob(ID.toString(), "INT");
                                                        if (existe) {System.out.println("La variable global -> " + ID.toString() + " <- ya fue declarada");}
                                                        scopePrograma.get(globalHash).add("Instancia GLOB: " + ID.toString() + ":" + "INT"); 
                                                        RESULT = "INT";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varInsGl",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // varInsGl ::= GLOB SEP CHAR SEP IDENTIFIER 
            {
              Object RESULT =null;
		int IDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ID = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		          
                                                        boolean existe = existeVarGlob(ID.toString(), "CHAR");
                                                        if (existe) {System.out.println("La variable global -> " + ID.toString() + " <- ya fue declarada");} 
                                                        scopePrograma.get(globalHash).add("Instancia GLOB: " + ID.toString() + ":" + "CHAR"); 
                                                        RESULT = "CHAR";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varInsGl",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // varInsGl ::= GLOB SEP FLOAT SEP IDENTIFIER 
            {
              Object RESULT =null;
		int IDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ID = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                        boolean existe = existeVarGlob(ID.toString(), "FLOAT");
                                                        if (existe) {System.out.println("La variable global -> " + ID.toString() + " <- ya fue declarada");}
                                                        scopePrograma.get(globalHash).add("Instancia GLOB: " + ID.toString() + ":" + "FLOAT"); 
                                                        RESULT = "FLOAT";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varInsGl",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // varInsGl ::= GLOB SEP STRINGT SEP IDENTIFIER 
            {
              Object RESULT =null;
		int IDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ID = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                        boolean existe = existeVarGlob(ID.toString(), "STRING");
                                                        if (existe) {System.out.println("La variable global -> " + ID.toString() + " <- ya fue declarada");}
                                                        scopePrograma.get(globalHash).add("Instancia GLOB: " + ID.toString() + ":" + "STRING"); 
                                                        RESULT = "STRING";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varInsGl",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // varInsGl ::= GLOB SEP BOOL SEP IDENTIFIER 
            {
              Object RESULT =null;
		int IDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ID = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                                                        boolean existe = existeVarGlob(ID.toString(), "BOOL");
                                                        if (existe) {System.out.println("La variable global -> " + ID.toString() + " <- ya fue declarada");}
                                                        scopePrograma.get(globalHash).add("Instancia GLOB: " + ID.toString() + ":" + "BOOL"); 
                                                        RESULT = "BOOL";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varInsGl",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // varInsAsig ::= varIns varAsig 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		if (!t1.equals(t2)) {System.out.println("ERROR VAR LOCAL-> El tipo de variable no coincide con el asignado");}
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varInsAsig",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // varInsAsigGl ::= varInsGl varAsig 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		if (!t1.equals(t2)) {System.out.println("ERROR VAR GLOB-> El tipo de variable no coincide con el asignado");}
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varInsAsigGl",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // funInitial ::= FUNC SEP INT SEP IDENTIFIER 
            {
              Object RESULT =null;
		int IDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ID = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   String tipo;
                                                            boolean existe = existeFun(ID.toString(), "INT");
                                                            if (existe) {System.out.println("La funcion -> " + ID.toString() + " <- ya fue declarada");} 
                                                            tipo = "tipo:func:INT";
                                                            ArrayList<String> fun = new ArrayList<String>();
                                                            currentHash = ID.toString();
                                                            fun.add(tipo);
                                                            scopePrograma.put(currentHash, fun);
                                                            RESULT = "INT";
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funInitial",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // funInitial ::= FUNC SEP CHAR SEP IDENTIFIER 
            {
              Object RESULT =null;
		int IDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ID = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   String tipo;
                                                            boolean existe = existeFun(ID.toString(), "CHAR");
                                                            if (existe) {System.out.println("La funcion -> " + ID.toString() + " <- ya fue declarada");} 
                                                            tipo = "tipo:func:CHAR";
                                                            ArrayList<String> fun = new ArrayList<String>();
                                                            currentHash = ID.toString();
                                                            fun.add(tipo);
                                                            scopePrograma.put(currentHash, fun);
                                                            RESULT = "CHAR";
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funInitial",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // funInitial ::= FUNC SEP BOOL SEP IDENTIFIER 
            {
              Object RESULT =null;
		int IDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ID = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   String tipo;
                                                            boolean existe = existeFun(ID.toString(), "BOOL");
                                                            if (existe) {System.out.println("La funcion -> " + ID.toString() + " <- ya fue declarada");} 
                                                            tipo = "tipo:func:BOOL";
                                                            ArrayList<String> fun = new ArrayList<String>();
                                                            currentHash = ID.toString();
                                                            fun.add(tipo);
                                                            scopePrograma.put(currentHash, fun);
                                                            RESULT = "BOOL";
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funInitial",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // funInitial ::= FUNC SEP STRINGT SEP IDENTIFIER 
            {
              Object RESULT =null;
		int IDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ID = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   String tipo;
                                                            boolean existe = existeFun(ID.toString(), "STRING");
                                                            if (existe) {System.out.println("La funcion -> " + ID.toString() + " <- ya fue declarada");} 
                                                            tipo = "tipo:func:STRING";
                                                            ArrayList<String> fun = new ArrayList<String>();
                                                            currentHash = ID.toString();
                                                            fun.add(tipo);
                                                            scopePrograma.put(currentHash, fun);
                                                            RESULT = "STRING";
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funInitial",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // funInitial ::= FUNC SEP FLOAT SEP IDENTIFIER 
            {
              Object RESULT =null;
		int IDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ID = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   String tipo;
                                                            boolean existe = existeFun(ID.toString(), "FLOAT");
                                                            if (existe) {System.out.println("La funcion -> " + ID.toString() + " <- ya fue declarada");} 
                                                            tipo = "tipo:func:FLOAT";
                                                            ArrayList<String> fun = new ArrayList<String>();
                                                            currentHash = ID.toString();
                                                            fun.add(tipo);
                                                            scopePrograma.put(currentHash, fun);
                                                            RESULT = "FLOAT";
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funInitial",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // funcStruc ::= funInitial DELIMETERBLOCK BLOCK RETURN SEP exprP ENDEXPR DELIMETERBLOCK 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int tipo2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tipo2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object tipo2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                                                                                                    if (!tipo.equals(tipo2)) {System.out.println("ERROR SEMANTICO -> El tipo de la funcion no coincide con el retornado");} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcStruc",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // funcStruc ::= funInitial DELIMETERBLOCK RETURN SEP exprP ENDEXPR DELIMETERBLOCK 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int tipo2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tipo2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object tipo2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                                                                                                    if (!tipo.equals(tipo2)) {System.out.println("ERROR SEMANTICO -> El tipo de la funcion no coincide con el retornado");} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcStruc",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // mainInitial ::= FUNC SEP INT SEP MAIN 
            {
              Object RESULT =null;
		                              
                                                        if (scopePrograma.get("MAIN") != null) {System.out.println("Ya existe una funcion main");}
                                                        String tipo;
                                                        tipo = "tipo:MAIN:INT";
                                                        ArrayList<String> fun = new ArrayList<String>();
                                                        currentHash = "MAIN";
                                                        fun.add(tipo);
                                                        scopePrograma.put(currentHash, fun);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mainInitial",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // mainStruc ::= mainInitial DELIMETERBLOCK BLOCK RETURN SEP exprP ENDEXPR DELIMETERBLOCK 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                                                                                                    if (!tipo.equals("INT")) {System.out.println("ERROR SEMANTICO -> El main debe siempre retornar entero");} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mainStruc",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // mainStruc ::= mainInitial DELIMETERBLOCK RETURN SEP exprP ENDEXPR DELIMETERBLOCK 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                                                                                                    if (!tipo.equals("INT")) {System.out.println("ERROR SEMANTICO -> El main debe siempre retornar entero");} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mainStruc",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // paramFunc ::= exprP COMA paramFunc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramFunc",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // paramFunc ::= exprP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramFunc",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // funcInvo ::= IDENTIFIER PARENTS paramFunc PARENTC 
            {
              Object RESULT =null;
		int IDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object ID = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 String tipo = getTipoFunc(ID.toString()); 
                                                            boolean existe = existeFun(ID.toString(), tipo);
                                                            if (!existe) {System.out.println("ERROR -> La funcion llamada no ha sido declarada");}
                                                            RESULT = tipo; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcInvo",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // funcInvo ::= IDENTIFIER PARENTS PARENTC 
            {
              Object RESULT =null;
		int IDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object ID = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 String tipo = getTipoFunc(ID.toString()); 
                                                            boolean existe = existeFun(ID.toString(), tipo);
                                                            if (!existe) {System.out.println("ERROR -> La funcion llamada no ha sido declarada");}
                                                            RESULT = tipo; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcInvo",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // ifStruc ::= IF PARENTS exprP PARENTC DELIMETERBLOCK BLOCK DELIMETERBLOCK 
            {
              Object RESULT =null;
		System.out.println("Se declaro estructura condicional IF");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifStruc",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // ifElseStruc ::= ifStruc ELSE DELIMETERBLOCK BLOCK DELIMETERBLOCK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifElseStruc",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // whileStruc ::= WHILE PARENTS exprP PARENTC DELIMETERBLOCK BLOCK DELIMETERBLOCK 
            {
              Object RESULT =null;
		System.out.println("Se declaro el ciclo while");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("whileStruc",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // arrayIns ::= LOC SEP INT SEP ARRAY SEP IDENTIFIER SQUARES INTEGER_LITERAL SQUAREC 
            {
              Object RESULT =null;
		int IDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object ID = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 
                                                                                        boolean existe = existeArr(ID.toString(), "INT");
                                                                                        if (existe) {System.out.println("El array local -> " + ID.toString() + " <- ya fue declarado");}  
                                                                                        scopePrograma.get(currentHash).add("Instancia LOC ARR: " + ID.toString() + ":" + "INT"); 
                                                                                        RESULT = "INT";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arrayIns",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // arrayIns ::= LOC SEP CHAR SEP ARRAY SEP IDENTIFIER SQUARES INTEGER_LITERAL SQUAREC 
            {
              Object RESULT =null;
		int IDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object ID = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 
                                                                                        boolean existe = existeArr(ID.toString(), "CHAR");
                                                                                        if (existe) {System.out.println("El array local -> " + ID.toString() + " <- ya fue declarado");}
                                                                                        scopePrograma.get(currentHash).add("Instancia LOC ARR: " + ID.toString() + ":" + "CHAR"); 
                                                                                        RESULT = "CHAR";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arrayIns",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // arrayInsGl ::= GLOB SEP INT SEP ARRAY SEP IDENTIFIER SQUARES INTEGER_LITERAL SQUAREC 
            {
              Object RESULT =null;
		int IDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object ID = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 
                                                                                        boolean existe = existeArrGlob(ID.toString(), "INT");
                                                                                        if (existe) {System.out.println("El array global -> " + ID.toString() + " <- ya fue declarado");}
                                                                                        scopePrograma.get(globalHash).add("Instancia GLOB ARR: " + ID.toString() + ":" + "INT"); 
                                                                                        RESULT = "INT";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arrayInsGl",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // arrayInsGl ::= GLOB SEP CHAR SEP ARRAY SEP IDENTIFIER SQUARES INTEGER_LITERAL SQUAREC 
            {
              Object RESULT =null;
		int IDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object ID = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 
                                                                                        boolean existe = existeArrGlob(ID.toString(), "CHAR");
                                                                                        if (existe) {System.out.println("El array global -> " + ID.toString() + " <- ya fue declarado");}
                                                                                        scopePrograma.get(globalHash).add("Instancia GLOB ARR: " + ID.toString() + ":" + "CHAR"); 
                                                                                        RESULT = "INT";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arrayInsGl",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // arrayAsig ::= IDENTIFIER EQ SQUARES elementos SQUAREC ENDEXPR 
            {
              Object RESULT =null;
		int IDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object ID = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int elemleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int elemright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object elem = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                                                                        String tipo = getTipo(ID.toString());
                                                                        boolean existe = existeArr(ID.toString(), tipo);
                                                                        boolean existe2 = existeArrGlob(ID.toString(), tipo);
                                                                        if (!existe && !existe2) {System.out.println("Este array -> " + ID.toString() + " <- no existe");}
                                                                        if (!tipo.equals(elem)) {System.out.println("Los elementos asignados deben coincidir en tipo entre ellos y de acuerdo al arreglo");}
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arrayAsig",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // arrayAsig ::= EQ SQUARES elementos SQUAREC ENDEXPR 
            {
              Object RESULT =null;
		int elemleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int elemright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object elem = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = elem;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arrayAsig",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // elementos ::= compAritOp COMA elementos 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if(val1.equals(val2)) {RESULT = val1;} else {RESULT= "NULL";}
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elementos",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // elementos ::= compAritOp 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elementos",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // arrayInsAsign ::= arrayIns arrayAsig 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if (!t1.equals(t2)) {System.out.println("ERROR ARRAY LOC -> No todos los valores coinciden con el tipo instanciado");}
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arrayInsAsign",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // arrayInsAsignGl ::= arrayInsGl arrayAsig 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            if (!t1.equals(t2)) {System.out.println("ERROR ARRAY GLOB -> No todos los valores coinciden con el tipo instanciado");}
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arrayInsAsignGl",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // arrayElement ::= IDENTIFIER SQUARES INTEGER_LITERAL SQUAREC 
            {
              Object RESULT =null;
		int IDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object ID = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 String tipo = getTipo(ID.toString()); RESULT = tipo; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arrayElement",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // switchStruc ::= SWITCH PARENTS IDENTIFIER PARENTC DELIMETERBLOCK caseStruc DEFAULT SEP BLOCK DELIMETERBLOCK 
            {
              Object RESULT =null;
		System.out.println("Se declaro estructura switch");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switchStruc",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // caseStruc ::= CASE SEP compAritOp SEP BLOCK caseStruc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("caseStruc",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // caseStruc ::= CASE SEP compAritOp SEP BLOCK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("caseStruc",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // forStruc ::= FOR SEP IDENTIFIER SEP IN SEP RANGE PARENTS exprP COMA exprP PARENTC DELIMETERBLOCK BLOCK DELIMETERBLOCK 
            {
              Object RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object expr1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object expr2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		 if(!expr1.equals("INT") || !expr2.equals("INT")) {System.out.println("ERROR SEMANTICO -> Los parametros del range deben ser de tipo entero");} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("forStruc",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-14)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // forStruc ::= FOR SEP IDENTIFIER SEP IN SEP RANGE PARENTS exprP PARENTC DELIMETERBLOCK BLOCK DELIMETERBLOCK 
            {
              Object RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object expr1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		 if(!expr1.equals("INT")) {System.out.println("ERROR SEMANTICO -> Los parametros del range deben ser de tipo entero");} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("forStruc",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // forStruc ::= FOR SEP IDENTIFIER SEP IN SEP RANGE PARENTS exprP COMA exprP COMA exprP PARENTC DELIMETERBLOCK BLOCK DELIMETERBLOCK 
            {
              Object RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object expr1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object expr2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int expr3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int expr3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object expr3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		 if(!expr1.equals("INT") || !expr2.equals("INT") || !expr3.equals("INT")) {System.out.println("ERROR SEMANTICO -> Los parametros del range deben ser de tipo entero");} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("forStruc",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-16)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // paramStruc ::= PARAM SEP INT SEP IDENTIFIER 
            {
              Object RESULT =null;
		int IDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ID = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		String tipo = getTipo(ID.toString()); RESULT = tipo; scopePrograma.get(currentHash).add("Instancia PARAM: " + ID.toString() + ":" + "INT"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramStruc",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // paramStruc ::= PARAM SEP CHAR SEP IDENTIFIER 
            {
              Object RESULT =null;
		int IDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ID = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		String tipo = getTipo(ID.toString()); RESULT = tipo; scopePrograma.get(currentHash).add("Instancia PARAM: " + ID.toString() + ":" + "CHAR"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramStruc",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // paramStruc ::= PARAM SEP STRINGT SEP IDENTIFIER 
            {
              Object RESULT =null;
		int IDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ID = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		String tipo = getTipo(ID.toString()); RESULT = tipo; scopePrograma.get(currentHash).add("Instancia PARAM: " + ID.toString() + ":" + "STRING"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramStruc",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // paramStruc ::= PARAM SEP FLOAT SEP IDENTIFIER 
            {
              Object RESULT =null;
		int IDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ID = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		String tipo = getTipo(ID.toString()); RESULT = tipo; scopePrograma.get(currentHash).add("Instancia PARAM: " + ID.toString() + ":" + "FLOAT"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramStruc",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // paramStruc ::= PARAM SEP BOOL SEP IDENTIFIER 
            {
              Object RESULT =null;
		int IDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ID = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		String tipo = getTipo(ID.toString()); RESULT = tipo; scopePrograma.get(currentHash).add("Instancia PARAM: " + ID.toString() + ":" + "BOOL"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramStruc",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // paramList ::= paramStruc paramList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramList",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // paramList ::= paramStruc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramList",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // printStruc ::= PRINT PARENTS numbers PARENTC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("printStruc",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // printStruc ::= PRINT PARENTS IDENTIFIER PARENTC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("printStruc",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // printStruc ::= PRINT PARENTS STRING_LITERAL PARENTC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("printStruc",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
